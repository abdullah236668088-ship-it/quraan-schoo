{"version":3,"file":"static/js/644.bc5c958d.chunk.js","mappings":"sOAuBe,SAASA,IACpB,MAAM,SAAEC,EAAQ,YAAEC,IAAgBC,EAAAA,EAAAA,MAC3BC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,OACpCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,IAE7BK,GAAYC,EAAAA,EAAAA,aAAYC,UAI1B,GAHAL,GAAW,GACXE,EAAS,KAEJR,IAAgBA,EAAYY,IAG7B,OAFAT,EAAa,WACbG,GAAW,GAIf,IAAIO,EAGJ,GAAiB,YAAbd,EACA,IAEI,MAAMe,GAAgBC,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,aAAaC,EAAAA,EAAAA,IAAM,YAAa,KAAMlB,EAAYY,MAEvFO,SADyBC,EAAAA,EAAAA,IAAQN,IACHO,KAAKC,IAAIC,GAAOA,EAAIC,IAExD,GAA0B,IAAtBL,EAAWM,OAGX,OAFAtB,EAAa,WACbG,GAAW,GAOfO,GAAkBE,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,kBAAkBC,EAAAA,EAAAA,IAAM,YAAa,KAAMC,GAEtF,CAAE,MAAOO,GAIL,OAHAC,QAAQpB,MAAM,gDAAiDmB,GAC/DlB,EAAS,sKAAsCkB,EAAIE,cACnDtB,GAAW,EAEf,KACG,IAAiB,UAAbP,EAOP,OAFAI,EAAa,WACbG,GAAW,GAJXO,GAAkBG,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,gBAMrC,CAEA,IACI,MAAMY,QAAsBT,EAAAA,EAAAA,IAAQP,GAC9BiB,EAAe,CAAC,EAEtBD,EAAcE,QAASR,IACnB,MAAMS,EAAST,EAAIU,OAGbC,EAAa,IAAIC,KAAKH,EAAOE,WAAWE,UAIxCC,EAAO,GAHAH,EAAWI,kBACTJ,EAAWK,WAAa,GAAGC,WAAWC,SAAS,EAAG,QACrDP,EAAWQ,UAAUF,WAAWC,SAAS,EAAG,OAGnDX,EAAaO,KACdP,EAAaO,GAAQ,GAEzBP,EAAaO,IAASL,EAAOW,gBAAkB,IAInD,MAAMC,EAASC,OAAOC,KAAKhB,GAAciB,OACnCC,EAAaJ,EAAOtB,IAAK2B,GAAUnB,EAAamB,IAElDL,EAAOnB,OAAS,EAChBtB,EAAa,CACTyC,SACAM,SAAU,CACN,CACID,MAAO,iHACPhB,KAAMe,EACNG,MAAM,EACNC,YAAa,oBACbC,QAAS,GACTC,qBAAsB,oBACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,wBAKnCtD,EAAa,KAErB,CAAE,MAAOuB,GACLC,QAAQpB,MAAM,+BAAgCmB,GAC9ClB,EAAS,wLAAyCkB,EAAIE,QAC1D,CAAC,QACGtB,GAAW,EACf,GACD,CAACP,EAAUC,IAMd,OAJA0D,EAAAA,EAAAA,WAAU,KACNjD,KACD,CAACA,IAEAJ,GAAgBsD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,kBAAiBC,SAAC,gHAC/CtD,GAAcoD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAEtD,KAG5CuD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCC,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcC,SAAC,oKAC5B3D,GAAaA,EAAU0C,OAAOnB,OAAS,GACpCkC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC5BF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAC9B,KAAM/B,EAAW8D,QAAS,CAAEC,YAAY,EAAMC,qBAAqB,QAG7EP,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,iVAI7C,CAjIAM,EAAAA,GAAQC,SAASC,EAAAA,GAAeC,EAAAA,GAAaC,EAAAA,GAAcC,EAAAA,GAAaC,EAAAA,GAAOC,EAAAA,GAASC,EAAAA,G","sources":["components/Charts.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { db } from \"../firebaseConfig\"; // لا حاجة لـ auth هنا\r\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\r\nimport { useAuth } from \"../contexts/AuthContext\"; // استيراد useAuth\r\n\r\n// Chart.js components registration (assuming this is handled globally or in index.js)\r\n// If not already registered, you might need to add:\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n} from 'chart.js';\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\n\r\nimport '../Styles/ChartsStyles.css'; // استيراد ملف التنسيقات الخارجي\r\n\r\nexport default function Charts() {\r\n    const { userRole, currentUser } = useAuth(); // استيراد userRole و currentUser\r\n    const [chartData, setChartData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\"); // إضافة حالة للخطأ\r\n\r\n    const fetchData = useCallback(async () => {\r\n        setLoading(true);\r\n        setError(\"\"); // مسح الأخطاء السابقة\r\n\r\n        if (!currentUser || !currentUser.uid) { // التأكد من وجود currentUser و UID\r\n            setChartData(null);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        let reportsQueryRef;\r\n        // بناء الاستعلام بناءً على دور المستخدم\r\n        // إذا كان معلمًا، يجلب تقارير الطلاب المرتبطين به فقط\r\n        if (userRole === \"teacher\") {\r\n            try {\r\n                // جلب الطلاب المرتبطين بالمعلم أولاً\r\n                const studentsQuery = query(collection(db, \"students\"), where(\"teacherId\", \"==\", currentUser.uid));\r\n                const studentsSnapshot = await getDocs(studentsQuery);\r\n                const studentIds = studentsSnapshot.docs.map(doc => doc.id);\r\n\r\n                if (studentIds.length === 0) {\r\n                    setChartData(null);\r\n                    setLoading(false);\r\n                    return; // لا يوجد طلاب لهذا المعلم، لا توجد تقارير لجلبها\r\n                }\r\n\r\n                // جلب التقارير الأسبوعية لهؤلاء الطلاب\r\n                // ملاحظة: Firestore لا يدعم استعلامات 'in' لأكثر من 10 عناصر.\r\n                // إذا كان هناك عدد كبير من الطلاب، ستحتاج إلى تقسيم الاستعلامات أو إعادة التفكير في البنية.\r\n                reportsQueryRef = query(collection(db, \"weeklyReports\"), where(\"studentId\", \"in\", studentIds));\r\n\r\n            } catch (err) {\r\n                console.error(\"Error fetching teacher's students or reports:\", err);\r\n                setError(\"فشل في جلب تقارير الطلاب للمعلم: \" + err.message);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n        } else if (userRole === \"admin\") {\r\n            // إذا كان مديرًا، يجلب جميع التقارير\r\n            reportsQueryRef = collection(db, \"weeklyReports\");\r\n        } else {\r\n            // للأدوار الأخرى، لا توجد بيانات لعرضها\r\n            setChartData(null);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const querySnapshot = await getDocs(reportsQueryRef);\r\n            const weeklyTotals = {};\r\n\r\n            querySnapshot.forEach((doc) => {\r\n                const report = doc.data();\r\n                // استخدام تنسيق تاريخ بسيط كـ \"YYYY-MM-DD\" لتجميع البيانات أسبوعيًا\r\n                // يمكن تحسين هذا ليعكس أسابيع فعلية (مثل رقم الأسبوع في السنة)\r\n                const reportDate = new Date(report.reportDate.toDate()); // تحويل Timestamp إلى Date\r\n                const year = reportDate.getFullYear();\r\n                const month = (reportDate.getMonth() + 1).toString().padStart(2, '0');\r\n                const day = reportDate.getDate().toString().padStart(2, '0');\r\n                const week = `${year}-${month}-${day}`; // يمكن تعديل هذا ليكون أسبوعًا فعليًا\r\n\r\n                if (!weeklyTotals[week]) {\r\n                    weeklyTotals[week] = 0;\r\n                }\r\n                weeklyTotals[week] += report.pagesMemorized || 0;\r\n            });\r\n\r\n            // فرز التواريخ لضمان الترتيب الصحيح في الرسم البياني\r\n            const labels = Object.keys(weeklyTotals).sort();\r\n            const dataPoints = labels.map((label) => weeklyTotals[label]);\r\n\r\n            if (labels.length > 0) {\r\n                setChartData({\r\n                    labels,\r\n                    datasets: [\r\n                        {\r\n                            label: \"عدد الصفحات المحفوظة\",\r\n                            data: dataPoints,\r\n                            fill: false,\r\n                            borderColor: \"rgb(75, 192, 192)\",\r\n                            tension: 0.1,\r\n                            pointBackgroundColor: \"rgb(75, 192, 192)\",\r\n                            pointBorderColor: \"#fff\",\r\n                            pointHoverBackgroundColor: \"#fff\",\r\n                            pointHoverBorderColor: \"rgb(75, 192, 192)\",\r\n                        },\r\n                    ],\r\n                });\r\n            } else {\r\n                setChartData(null); // لا توجد بيانات لعرضها\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error processing chart data:\", err);\r\n            setError(\"فشل في معالجة بيانات الرسم البياني: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [userRole, currentUser]); // إضافة currentUser و userRole إلى dependencies\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData]);\r\n\r\n    if (loading) return <p className=\"loading-message\">جاري تحميل البيانات...</p>;\r\n    if (error) return <p className=\"error-message\">{error}</p>;\r\n\r\n    return (\r\n        <div className=\"charts-container page-container\">\r\n            <h2 className=\"charts-title\">الرسوم البيانية لإنجاز الطلاب</h2>\r\n            {chartData && chartData.labels.length > 0 ? (\r\n                <div className=\"chart-container\">\r\n                    <Line data={chartData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n                </div>\r\n            ) : (\r\n                <p className=\"no-chart-data\">لا توجد بيانات لعرضها حاليًا. تأكد من وجود تقارير أسبوعية للطلاب.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["Charts","userRole","currentUser","useAuth","chartData","setChartData","useState","loading","setLoading","error","setError","fetchData","useCallback","async","uid","reportsQueryRef","studentsQuery","query","collection","db","where","studentIds","getDocs","docs","map","doc","id","length","err","console","message","querySnapshot","weeklyTotals","forEach","report","data","reportDate","Date","toDate","week","getFullYear","getMonth","toString","padStart","getDate","pagesMemorized","labels","Object","keys","sort","dataPoints","label","datasets","fill","borderColor","tension","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","useEffect","_jsx","className","children","_jsxs","Line","options","responsive","maintainAspectRatio","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend"],"sourceRoot":""}