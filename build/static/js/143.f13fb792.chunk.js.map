{"version":3,"file":"static/js/143.f13fb792.chunk.js","mappings":"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","sources":["components/ReportsPage.js"],"sourcesContent":["// src/pages/ReportsPage.js\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { db } from \"../firebaseConfig\";\r\nimport {\r\n    collection,\r\n    query,\r\n    where,\r\n    getDocs,\r\n    orderBy,\r\n} from \"firebase/firestore\";\r\nimport { exportToPdf } from \"../utils/pdfExporter\"; // استيراد دالة تصدير PDF\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport '../Styles/ReportsPageStyles.css';\r\n\r\n// استيراد مكونات Chart.js اللازمة\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\n// تسجيل مكونات Chart.js\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nexport default function ReportsPage() {\r\n    const { currentUser, userRole } = useAuth(); // جلب المستخدم الحالي ودوره\r\n    const [reports, setReports] = useState([]); // لتخزين بيانات التقارير\r\n    const [students, setStudents] = useState([]); // لتخزين بيانات الطلاب (للتصفية)\r\n    const [halaqat, setHalaqat] = useState([]); // لتخزين بيانات الحلقات (للتصفية)\r\n    const [teachers, setTeachers] = useState([]); // لتخزين بيانات المعلمين (للعرض والتصفية)\r\n    const [loading, setLoading] = useState(true); // حالة التحميل\r\n    const [error, setError] = useState(\"\"); // رسالة الخطأ\r\n    const [showReport, setShowReport] = useState(false); // للتحكم في عرض جدول التقرير والرسوم البيانية\r\n\r\n    // حالات التصفية\r\n    const [selectedStudent, setSelectedStudent] = useState(\"\");\r\n    const [selectedHalaqa, setSelectedHalaqa] = useState(\"\");\r\n    const [selectedTeacher, setSelectedTeacher] = useState(\"\"); // حقل جديد لتصفية المعلمين\r\n    const [startDate, setStartDate] = useState(\"\");\r\n    const [endDate, setEndDate] = useState(\"\");\r\n\r\n    // حالات بيانات الرسم البياني الإجمالي (للتصفية الحالية)\r\n    const [overallChartData, setOverallChartData] = useState(null);\r\n    // حالة بيانات الرسم البياني للمتوسطات الشهرية\r\n    const [monthlyAverageChartData, setMonthlyAverageChartData] = useState(null);\r\n\r\n    /**\r\n     * دالة مساعدة لجلب جميع الطلاب والحلقات والمعلمين.\r\n     * تُستخدم لملء قوائم التصفية ولعرض الأسماء بدلاً من المعرفات.\r\n     */\r\n    const fetchDropdownData = useCallback(async () => {\r\n        if (!currentUser) return;\r\n        try {\r\n            let studentsQuery = collection(db, \"students\");\r\n            let halaqatQuery = collection(db, \"halaqat\");\r\n\r\n            // إذا كان المستخدم معلمًا، قم بتصفية بيانات القوائم المنسدلة\r\n            if (userRole === 'teacher') {\r\n                const teacherHalaqatSnapshot = await getDocs(query(collection(db, \"halaqat\"), where(\"teacherId\", \"==\", currentUser.uid)));\r\n                const teacherHalaqaIds = teacherHalaqatSnapshot.docs.map(doc => doc.id);\r\n\r\n                if (teacherHalaqaIds.length > 0) {\r\n                    // جلب الطلاب فقط من حلقات المعلم\r\n                    studentsQuery = query(collection(db, \"students\"), where(\"halaqaId\", \"in\", teacherHalaqaIds));\r\n                    // جلب حلقات المعلم فقط\r\n                    halaqatQuery = query(collection(db, \"halaqat\"), where(\"teacherId\", \"==\", currentUser.uid));\r\n                } else {\r\n                    // لا يوجد حلقات، لا حاجة لجلب الطلاب\r\n                    setStudents([]);\r\n                    setHalaqat([]);\r\n                    setTeachers([]);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const [studentsSnapshot, halaqatSnapshot, usersSnapshot] = await Promise.all([\r\n                getDocs(studentsQuery),\r\n                getDocs(halaqatQuery),\r\n                getDocs(query(collection(db, \"users\"), where(\"role\", \"==\", \"teacher\"))), // جلب المعلمين فقط\r\n            ]);\r\n\r\n            const studentsList = studentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            const halaqatList = halaqatSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            const teachersList = usersSnapshot.docs.map(doc => ({ id: doc.id, name: doc.data().name || doc.data().email }));\r\n\r\n            setStudents(studentsList);\r\n            setHalaqat(halaqatList);\r\n            setTeachers(teachersList);\r\n        } catch (err) {\r\n            console.error(\"Error fetching dropdown data:\", err);\r\n            setError(\"فشل في جلب بيانات القوائم المنسدلة.\");\r\n        }\r\n    }, [currentUser, userRole]);\r\n\r\n    // جلب بيانات القوائم المنسدلة عند تحميل المكون\r\n    useEffect(() => {\r\n        fetchDropdownData();\r\n    }, [fetchDropdownData]);\r\n\r\n    /**\r\n     * دالة لجلب التقارير بناءً على معايير التصفية.\r\n     * تقوم أيضًا بحساب البيانات للرسوم البيانية الإجمالية والشهرية.\r\n     */\r\n    const fetchReports = useCallback(async () => {\r\n        setLoading(true);\r\n        setError(\"\");\r\n        setReports([]); // مسح التقارير السابقة\r\n        setOverallChartData(null); // مسح بيانات الرسم البياني الإجمالي السابقة\r\n        setMonthlyAverageChartData(null); // مسح بيانات الرسم البياني للمتوسطات الشهرية السابقة\r\n        setShowReport(false); // إخفاء منطقة التقرير حتى يتم جلب البيانات\r\n\r\n        let reportsQuery = collection(db, \"weeklyReports\");\r\n        let conditions = [];\r\n\r\n        // تصفية حسب الطالب\r\n        if (selectedStudent) {\r\n            conditions.push(where(\"studentId\", \"==\", selectedStudent));\r\n        }\r\n        // تصفية حسب الحلقة\r\n        if (selectedHalaqa) {\r\n            conditions.push(where(\"halaqaId\", \"==\", selectedHalaqa));\r\n        }\r\n        // تصفية حسب المعلم (إذا كان الدور معلم، أو إذا اختار المدير معلمًا)\r\n        if (userRole === 'teacher' && currentUser?.uid) {\r\n            const teacherHalaqat = halaqat.filter(h => h.teacherId === currentUser.uid).map(h => h.id);\r\n            if (teacherHalaqat.length > 0) {\r\n                conditions.push(where(\"halaqaId\", \"in\", teacherHalaqat));\r\n            } else {\r\n                setLoading(false);\r\n                setError(\"ليس لديك حلقات مرتبطة لعرض التقارير.\");\r\n                return;\r\n            }\r\n        } else if (userRole === 'admin' && selectedTeacher) {\r\n            const teacherHalaqat = halaqat.filter(h => h.teacherId === selectedTeacher).map(h => h.id);\r\n            if (teacherHalaqat.length > 0) {\r\n                conditions.push(where(\"halaqaId\", \"in\", teacherHalaqat));\r\n            } else {\r\n                setLoading(false);\r\n                setError(\"المعلم المحدد ليس لديه حلقات مرتبطة.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        // تصفية حسب نطاق التاريخ\r\n        if (startDate) {\r\n            conditions.push(where(\"reportDate\", \">=\", startDate));\r\n        }\r\n        if (endDate) {\r\n            conditions.push(where(\"reportDate\", \"<=\", endDate));\r\n        }\r\n\r\n        try {\r\n            // بناء الاستعلام مع جميع الشروط والترتيب\r\n            const q = query(reportsQuery, ...conditions, orderBy(\"reportDate\", \"asc\")); // ترتيب تصاعدي للتاريخ للمتوسطات الشهرية\r\n\r\n            const querySnapshot = await getDocs(q);\r\n            const reportsList = [];\r\n            let totalPagesMemorizedOverall = 0;\r\n            let totalPartsRevisedOverall = 0;\r\n            let totalAttendanceDaysOverall = 0;\r\n            let totalRatingOverall = 0;\r\n            let reportCountOverall = 0;\r\n\r\n            // كائن لتجميع البيانات الشهرية\r\n            const monthlyAggregates = {};\r\n\r\n            querySnapshot.forEach((doc) => {\r\n                const data = doc.data();\r\n                const studentName = students.find(s => s.id === data.studentId)?.name || \"غير معروف\";\r\n                const halaqaName = halaqat.find(h => h.id === data.halaqaId)?.name || \"غير معروف\";\r\n                const teacherIdFromHalaqa = halaqat.find(h => h.id === data.halaqaId)?.teacherId;\r\n                const teacherName = teachers.find(t => t.id === teacherIdFromHalaqa)?.name || \"غير معروف\";\r\n\r\n                reportsList.push({\r\n                    id: doc.id,\r\n                    studentName,\r\n                    halaqaName,\r\n                    teacherName,\r\n                    reportDateFormatted: data.reportDate,\r\n                    ...data\r\n                });\r\n\r\n                // تجميع البيانات للرسم البياني الإجمالي\r\n                totalPagesMemorizedOverall += (data.pagesMemorized || 0);\r\n                totalPartsRevisedOverall += (data.partsRevised || 0);\r\n                totalAttendanceDaysOverall += (data.attendanceDays || 0);\r\n                totalRatingOverall += (data.rating || 0);\r\n                reportCountOverall++;\r\n\r\n                // تجميع البيانات للمتوسطات الشهرية\r\n                const reportDate = new Date(data.reportDate); // تحويل التاريخ إلى كائن Date\r\n                const yearMonthKey = `${reportDate.getFullYear()}-${(reportDate.getMonth() + 1).toString().padStart(2, '0')}`; // YYYY-MM\r\n                const monthYearLabel = reportDate.toLocaleString('ar-EG', { month: 'long', year: 'numeric' }); // اسم الشهر والسنة بالعربية\r\n\r\n                if (!monthlyAggregates[yearMonthKey]) {\r\n                    monthlyAggregates[yearMonthKey] = {\r\n                        monthLabel: monthYearLabel,\r\n                        totalPagesMemorized: 0,\r\n                        totalPartsRevised: 0,\r\n                        totalAttendanceDays: 0,\r\n                        totalRating: 0,\r\n                        count: 0\r\n                    };\r\n                }\r\n                monthlyAggregates[yearMonthKey].totalPagesMemorized += (data.pagesMemorized || 0);\r\n                monthlyAggregates[yearMonthKey].totalPartsRevised += (data.partsRevised || 0);\r\n                monthlyAggregates[yearMonthKey].totalAttendanceDays += (data.attendanceDays || 0);\r\n                monthlyAggregates[yearMonthKey].totalRating += (data.rating || 0);\r\n                monthlyAggregates[yearMonthKey].count++;\r\n            });\r\n\r\n            setReports(reportsList);\r\n            setShowReport(true); // عرض منطقة التقرير إذا كانت هناك بيانات\r\n\r\n            // إعداد بيانات الرسم البياني الإجمالي\r\n            if (reportCountOverall > 0) {\r\n                setOverallChartData({\r\n                    labels: ['إجمالي الحفظ (صفحات)', 'إجمالي المراجعة (أجزاء)', 'إجمالي الحضور (أيام)', 'متوسط التقييم'],\r\n                    datasets: [\r\n                        {\r\n                            label: 'إحصائيات التقارير المحددة',\r\n                            data: [\r\n                                totalPagesMemorizedOverall,\r\n                                totalPartsRevisedOverall,\r\n                                totalAttendanceDaysOverall,\r\n                                (totalRatingOverall / reportCountOverall).toFixed(2)\r\n                            ],\r\n                            backgroundColor: [\r\n                                'rgba(54, 162, 235, 0.6)',\r\n                                'rgba(75, 192, 192, 0.6)',\r\n                                'rgba(153, 102, 255, 0.6)',\r\n                                'rgba(255, 159, 64, 0.6)',\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(54, 162, 235, 1)',\r\n                                'rgba(75, 192, 192, 1)',\r\n                                'rgba(153, 102, 255, 1)',\r\n                                'rgba(255, 159, 64, 1)',\r\n                            ],\r\n                            borderWidth: 1,\r\n                        },\r\n                    ],\r\n                });\r\n            } else {\r\n                setOverallChartData(null);\r\n            }\r\n\r\n            // إعداد بيانات الرسم البياني للمتوسطات الشهرية\r\n            const sortedMonths = Object.keys(monthlyAggregates).sort(); // ترتيب الشهور زمنيًا\r\n\r\n            if (sortedMonths.length > 0) {\r\n                const chartLabels = sortedMonths.map(monthKey => monthlyAggregates[monthKey].monthLabel);\r\n                const avgMemorizedData = sortedMonths.map(monthKey => (monthlyAggregates[monthKey].totalPagesMemorized / monthlyAggregates[monthKey].count).toFixed(2));\r\n                const avgRevisedData = sortedMonths.map(monthKey => (monthlyAggregates[monthKey].totalPartsRevised / monthlyAggregates[monthKey].count).toFixed(2));\r\n                const avgAttendanceData = sortedMonths.map(monthKey => (monthlyAggregates[monthKey].totalAttendanceDays / monthlyAggregates[monthKey].count).toFixed(2));\r\n                const avgRatingData = sortedMonths.map(monthKey => (monthlyAggregates[monthKey].totalRating / monthlyAggregates[monthKey].count).toFixed(2));\r\n\r\n                setMonthlyAverageChartData({\r\n                    labels: chartLabels,\r\n                    datasets: [\r\n                        {\r\n                            label: 'متوسط الحفظ (صفحات)',\r\n                            data: avgMemorizedData,\r\n                            backgroundColor: 'rgba(54, 162, 235, 0.6)',\r\n                            borderColor: 'rgba(54, 162, 235, 1)',\r\n                            borderWidth: 1,\r\n                        },\r\n                        {\r\n                            label: 'متوسط المراجعة (أجزاء)',\r\n                            data: avgRevisedData,\r\n                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n                            borderColor: 'rgba(75, 192, 192, 1)',\r\n                            borderWidth: 1,\r\n                        },\r\n                        {\r\n                            label: 'متوسط الحضور (أيام)',\r\n                            data: avgAttendanceData,\r\n                            backgroundColor: 'rgba(153, 102, 255, 0.6)',\r\n                            borderColor: 'rgba(153, 102, 255, 1)',\r\n                            borderWidth: 1,\r\n                        },\r\n                        {\r\n                            label: 'متوسط التقييم',\r\n                            data: avgRatingData,\r\n                            backgroundColor: 'rgba(255, 159, 64, 0.6)',\r\n                            borderColor: 'rgba(255, 159, 64, 1)',\r\n                            borderWidth: 1,\r\n                        },\r\n                    ],\r\n                });\r\n            } else {\r\n                setMonthlyAverageChartData(null);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching reports:\", err);\r\n            setError(\"فشل في جلب التقارير: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [selectedStudent, selectedHalaqa, selectedTeacher, startDate, endDate, students, halaqat, teachers, userRole, currentUser]);\r\n\r\n    // دالة لتصدير التقارير المعروضة حاليًا إلى PDF\r\n    const handleExportPdf = () => {\r\n        if (reports.length === 0) {\r\n            // يمكن استبدال هذا بمودال مخصص بدلاً من alert()\r\n            alert(\"لا توجد تقارير لتصديرها.\");\r\n            return;\r\n        }\r\n\r\n        // تحديد اسم المعلم ليتم عرضه في رأس التقرير\r\n        let teacherNameToExport = null;\r\n        if (userRole === 'admin' && selectedTeacher) {\r\n            const selectedTeacherObject = teachers.find(t => t.id === selectedTeacher);\r\n            teacherNameToExport = selectedTeacherObject ? selectedTeacherObject.name : null;\r\n        } else if (userRole === 'teacher' && currentUser?.displayName) {\r\n            teacherNameToExport = currentUser.displayName;\r\n        } else if (userRole === 'teacher' && currentUser?.email) {\r\n            teacherNameToExport = currentUser.email;\r\n        }\r\n\r\n        // تحديد اسم الشهر والسنة ونوع التقرير بناءً على التواريخ المختارة\r\n        let monthName = null;\r\n        let year = null;\r\n        let currentReportType = 'custom'; // الافتراضي\r\n\r\n        if (startDate && endDate) {\r\n            const start = new Date(startDate);\r\n            const end = new Date(endDate);\r\n\r\n            const monthNamesArabic = [\r\n                \"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\",\r\n                \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\"\r\n            ];\r\n\r\n            if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {\r\n                monthName = monthNamesArabic[start.getMonth()];\r\n                year = start.getFullYear().toString();\r\n                currentReportType = 'monthly';\r\n            } else if (start.getFullYear() === end.getFullYear() &&\r\n                start.getMonth() === 0 && end.getMonth() === 11 &&\r\n                start.getDate() === 1 && end.getDate() === 31) {\r\n                year = start.getFullYear().toString();\r\n                currentReportType = 'annual';\r\n            } else {\r\n                currentReportType = 'custom';\r\n            }\r\n        }\r\n\r\n        const columns = [\r\n            \"ملاحظات\", \"التقييم\", \"أيام الحضور\", \"أجزاء المراجعة\", \"صفحات الحفظ\", \"التاريخ\", \"الحلقة\", \"الطالب\"\r\n        ];\r\n\r\n        const rows = reports.map(report => ([\r\n            report.notes,\r\n            `${report.rating}/100`,\r\n            report.attendanceDays,\r\n            report.partsRevised,\r\n            report.pagesMemorized,\r\n            report.reportDateFormatted,\r\n            report.halaqaName,\r\n            report.studentName\r\n        ]).reverse()); // نعكس ترتيب البيانات فقط، وليس الأعمدة\r\n\r\n        // استدعاء دالة التصدير مع المعلمات الجديدة\r\n        exportToPdf(\r\n            currentReportType,    // نوع التقرير\r\n            columns,\r\n            rows,\r\n            \"WeeklyReports\",\r\n            teacherNameToExport,  // اسم المعلم\r\n            monthName,            // اسم الشهر (إذا كان شهريًا)\r\n            year                  // السنة (إذا كان شهريًا أو سنويًا)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"reports-page-container page-container\">\r\n            <h2 className=\"reports-title\">التقارير والإحصائيات</h2>\r\n\r\n            <div className=\"filters-section card\">\r\n                <h3>تصفية التقارير</h3>\r\n                <div className=\"filters-grid\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"student-filter\">الطالب:</label>\r\n                        <select\r\n                            id=\"student-filter\"\r\n                            value={selectedStudent}\r\n                            onChange={(e) => setSelectedStudent(e.target.value)}\r\n                            className=\"filter-select\"\r\n                        >\r\n                            <option value=\"\">جميع الطلاب</option>\r\n                            {students.map(student => (\r\n                                <option key={student.id} value={student.id}>{student.name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"halaqa-filter\">الحلقة:</label>\r\n                        <select\r\n                            id=\"halaqa-filter\"\r\n                            value={selectedHalaqa}\r\n                            onChange={(e) => setSelectedHalaqa(e.target.value)}\r\n                            className=\"filter-select\"\r\n                        >\r\n                            <option value=\"\">جميع الحلقات</option>\r\n                            {halaqat.map(halaqa => (\r\n                                <option key={halaqa.id} value={halaqa.id}>{halaqa.name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    {userRole === 'admin' && ( // عرض حقل تصفية المعلم للمدير فقط\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"teacher-filter\">المعلم:</label>\r\n                            <select\r\n                                id=\"teacher-filter\"\r\n                                value={selectedTeacher}\r\n                                onChange={(e) => setSelectedTeacher(e.target.value)}\r\n                                className=\"filter-select\"\r\n                            >\r\n                                <option value=\"\">جميع المعلمين</option>\r\n                                {teachers.map(teacher => (\r\n                                    <option key={teacher.id} value={teacher.id}>{teacher.name}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"start-date-filter\">من تاريخ:</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            id=\"start-date-filter\"\r\n                            value={startDate}\r\n                            onChange={(e) => setStartDate(e.target.value)}\r\n                            className=\"filter-input\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"end-date-filter\">إلى تاريخ:</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            id=\"end-date-filter\"\r\n                            value={endDate}\r\n                            onChange={(e) => setEndDate(e.target.value)}\r\n                            className=\"filter-input\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <button onClick={fetchReports} className=\"view-reports-button\" disabled={loading}>\r\n                    {loading ? \"جاري التحميل...\" : \"عرض التقارير\"}\r\n                </button>\r\n            </div>\r\n\r\n            {loading && <p className=\"loading-message\">جاري تحميل البيانات...</p>}\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n\r\n            {showReport && reports.length > 0 && (\r\n                <>\r\n                    <div className=\"report-charts-section card\">\r\n                        <h3>رسوم بيانية إحصائية للتقارير المحددة</h3>\r\n                        {overallChartData ? (\r\n                            <div className=\"chart-container\">\r\n                                <Bar data={overallChartData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n                            </div>\r\n                        ) : (\r\n                            <p className=\"no-chart-data\">لا توجد بيانات كافية لإنشاء الرسم البياني الإجمالي.</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* قسم الرسم البياني للمتوسطات الشهرية */}\r\n                    <div className=\"monthly-average-chart-section card\">\r\n                        <h3>متوسط الأداء الشهري</h3>\r\n                        {monthlyAverageChartData ? (\r\n                            <div className=\"chart-container\">\r\n                                <Bar data={monthlyAverageChartData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n                            </div>\r\n                        ) : (\r\n                            <p className=\"no-chart-data\">لا توجد بيانات كافية لإنشاء رسم بياني للمتوسطات الشهرية.</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"report-table-section card\">\r\n                        <div className=\"table-header-actions\">\r\n                            <h3>التقارير التفصيلية</h3>\r\n                            <button onClick={handleExportPdf} className=\"export-pdf-button\">\r\n                                تصدير إلى PDF\r\n                            </button>\r\n                        </div>\r\n                        {reports.length > 0 ? (\r\n                            <>\r\n                                <div className=\"table-responsive\">\r\n                                    <table className=\"reports-table\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>الطالب</th>\r\n                                                <th>الحلقة</th>\r\n                                                <th>المعلم</th>\r\n                                                <th>التاريخ</th>\r\n                                                <th>صفحات الحفظ</th>\r\n                                                <th>أجزاء المراجعة</th>\r\n                                                <th>أيام الحضور</th>\r\n                                                <th>التقييم</th>\r\n                                                <th>ملاحظات</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {reports.map((report) => (\r\n                                                <tr key={report.id}>\r\n                                                    <td>{report.studentName}</td>\r\n                                                    <td>{report.halaqaName}</td>\r\n                                                    <td>{report.teacherName}</td>\r\n                                                    <td>{report.reportDateFormatted}</td>\r\n                                                    <td>{report.pagesMemorized}</td>\r\n                                                    <td>{report.partsRevised}</td>\r\n                                                    <td>{report.attendanceDays}</td>\r\n                                                    <td>{report.rating}/100</td>\r\n                                                    <td>{report.notes}</td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </>\r\n                        ) : (\r\n                            <p className=\"no-data-message\">لا توجد تقارير تفصيلية لعرضها بناءً على المعايير المحددة.</p>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {reports.length === 0 && !loading && !error && !showReport && (\r\n                <p className=\"info-message\">يرجى تحديد معايير التقرير والنقر على \"عرض التقارير\".</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["ReportsPage","currentUser","userRole","useAuth","reports","setReports","useState","students","setStudents","halaqat","setHalaqat","teachers","setTeachers","loading","setLoading","error","setError","showReport","setShowReport","selectedStudent","setSelectedStudent","selectedHalaqa","setSelectedHalaqa","selectedTeacher","setSelectedTeacher","startDate","setStartDate","endDate","setEndDate","overallChartData","setOverallChartData","monthlyAverageChartData","setMonthlyAverageChartData","fetchDropdownData","useCallback","async","studentsQuery","collection","db","halaqatQuery","teacherHalaqaIds","getDocs","query","where","uid","docs","map","doc","id","length","studentsSnapshot","halaqatSnapshot","usersSnapshot","Promise","all","studentsList","data","halaqatList","teachersList","name","email","err","console","useEffect","fetchReports","reportsQuery","conditions","push","teacherHalaqat","filter","h","teacherId","q","orderBy","querySnapshot","reportsList","totalPagesMemorizedOverall","totalPartsRevisedOverall","totalAttendanceDaysOverall","totalRatingOverall","reportCountOverall","monthlyAggregates","forEach","_students$find","_halaqat$find","_halaqat$find2","_teachers$find","studentName","find","s","studentId","halaqaName","halaqaId","teacherIdFromHalaqa","teacherName","t","reportDateFormatted","reportDate","pagesMemorized","partsRevised","attendanceDays","rating","Date","yearMonthKey","getFullYear","getMonth","toString","padStart","monthYearLabel","toLocaleString","month","year","monthLabel","totalPagesMemorized","totalPartsRevised","totalAttendanceDays","totalRating","count","labels","datasets","label","toFixed","backgroundColor","borderColor","borderWidth","sortedMonths","Object","keys","sort","chartLabels","monthKey","avgMemorizedData","avgRevisedData","avgAttendanceData","avgRatingData","message","_jsxs","className","children","_jsx","htmlFor","value","onChange","e","target","student","halaqa","teacher","type","onClick","disabled","_Fragment","Bar","options","responsive","maintainAspectRatio","handleExportPdf","alert","teacherNameToExport","selectedTeacherObject","displayName","monthName","currentReportType","start","end","monthNamesArabic","getDate","rows","report","notes","reverse","exportToPdf","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend"],"sourceRoot":""}