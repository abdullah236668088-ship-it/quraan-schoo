{"version":3,"file":"static/js/128.3cb4e028.chunk.js","mappings":"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","sources":["components/Login.js"],"sourcesContent":["// src/pages/LoginPage.js\r\nimport React, { useState, useCallback } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport { auth, db } from \"../firebaseConfig\";\r\nimport { signInWithEmailAndPassword, sendPasswordResetEmail } from \"firebase/auth\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport { useAuth } from '../contexts/AuthContext'; // استيراد useAuth لجلب getDashboardPath\r\nimport '../Styles/LoginStyles.css'; // استيراد ملف التنسيقات الخارجي\r\nimport '../Styles/AuthForm.css'; // تأكد من استيراد هذا الملف للأنماط المشتركة\r\n\r\nexport default function Login() {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [loading, setLoading] = useState(false); // إضافة حالة التحميل\r\n    const navigate = useNavigate();\r\n    // جلب دالة getDashboardPath من AuthContext\r\n    const { getDashboardPath } = useAuth();\r\n\r\n    // دالة للتحقق من صحة تنسيق البريد الإلكتروني\r\n    const isValidEmail = (email) => {\r\n        return /\\S+@\\S+\\.\\S+/.test(email);\r\n    };\r\n\r\n    // دالة لتسجيل الدخول\r\n    const handleLogin = useCallback(async (e) => {\r\n        e.preventDefault();\r\n        setError(\"\"); // مسح رسائل الخطأ السابقة\r\n        setMessage(\"\"); // مسح رسائل النجاح السابقة\r\n\r\n        // التحقق من صحة المدخلات قبل محاولة تسجيل الدخول\r\n        if (!isValidEmail(email)) {\r\n            setError(\"يرجى إدخال بريد إلكتروني صحيح.\");\r\n            return;\r\n        }\r\n        if (password.length < 6) {\r\n            setError(\"كلمة المرور يجب أن تكون 6 أحرف على الأقل.\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true); // بدء التحميل\r\n        try {\r\n            // محاولة تسجيل الدخول باستخدام البريد الإلكتروني وكلمة المرور\r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n\r\n            // جلب دور المستخدم من Firestore بعد تسجيل الدخول بنجاح\r\n            const userDocRef = doc(db, \"users\", user.uid);\r\n            const userDocSnap = await getDoc(userDocRef);\r\n\r\n            if (userDocSnap.exists()) {\r\n                const userRole = userDocSnap.data().role;\r\n                // توجيه المستخدم إلى لوحة التحكم المناسبة لدوره باستخدام الدالة من AuthContext\r\n                navigate(getDashboardPath(userRole));\r\n            } else {\r\n                // إذا لم يتم العثور على دور المستخدم في Firestore، فهذا يشير إلى مشكلة في البيانات\r\n                setError(\"لم يتم العثور على دور المستخدم. يرجى الاتصال بالدعم.\");\r\n                await auth.signOut(); // تسجيل الخروج للحفاظ على الأمان\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Login error:\", err);\r\n            // التعامل مع أخطاء تسجيل الدخول وعرض رسائل واضحة للمستخدم\r\n            switch (err.code) {\r\n                case 'auth/user-not-found':\r\n                case 'auth/wrong-password':\r\n                case 'auth/invalid-credential': // يشمل الخطأين السابقين في بعض إصدارات Firebase\r\n                    setError('البريد الإلكتروني أو كلمة المرور غير صحيحة.');\r\n                    break;\r\n                case 'auth/invalid-email':\r\n                    setError('تنسيق البريد الإلكتروني غير صالح.');\r\n                    break;\r\n                case 'auth/too-many-requests':\r\n                    setError('تم حظر حسابك مؤقتًا بسبب محاولات تسجيل دخول فاشلة متعددة. يرجى المحاولة لاحقًا.');\r\n                    break;\r\n                case 'auth/user-disabled':\r\n                    setError('تم تعطيل هذا الحساب. يرجى الاتصال بالدعم.');\r\n                    break;\r\n                default:\r\n                    setError('فشل تسجيل الدخول. يرجى المحاولة مرة أخرى.');\r\n            }\r\n        } finally {\r\n            setLoading(false); // إنهاء التحميل في كل الأحوال\r\n        }\r\n    }, [email, password, navigate, getDashboardPath]); // الاعتماديات لدالة useCallback\r\n\r\n    // دالة لإعادة تعيين كلمة المرور\r\n    const handleResetPassword = useCallback(async () => {\r\n        setError(\"\"); // مسح رسائل الخطأ السابقة\r\n        setMessage(\"\"); // مسح رسائل النجاح السابقة\r\n\r\n        // التحقق من وجود البريد الإلكتروني قبل إرسال رابط إعادة التعيين\r\n        if (!email.trim()) {\r\n            setError(\"يرجى إدخال بريدك الإلكتروني لإعادة تعيين كلمة المرور.\");\r\n            return;\r\n        }\r\n        if (!isValidEmail(email)) {\r\n            setError(\"يرجى إدخال بريد إلكتروني صحيح لإعادة تعيين كلمة المرور.\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true); // بدء التحميل\r\n        try {\r\n            // إرسال رابط إعادة تعيين كلمة المرور\r\n            await sendPasswordResetEmail(auth, email);\r\n            setMessage(\"تم إرسال رابط إعادة تعيين كلمة المرور إلى بريدك الإلكتروني. يرجى التحقق من صندوق الوارد والبريد المزعج.\");\r\n        } catch (err) {\r\n            console.error(\"Password reset error:\", err);\r\n            // التعامل مع أخطاء إعادة تعيين كلمة المرور\r\n            switch (err.code) {\r\n                case 'auth/user-not-found':\r\n                    setError('لا يوجد مستخدم بهذا البريد الإلكتروني.');\r\n                    break;\r\n                case 'auth/invalid-email':\r\n                    setError('تنسيق البريد الإلكتروني غير صالح.');\r\n                    break;\r\n                default:\r\n                    setError('فشل في إرسال رابط إعادة تعيين كلمة المرور. يرجى المحاولة مرة أخرى.');\r\n            }\r\n        } finally {\r\n            setLoading(false); // إنهاء التحميل في كل الأحوال\r\n        }\r\n    }, [email]); // الاعتماديات لدالة useCallback\r\n\r\n    return (\r\n        <div className=\"auth-container\">\r\n            <div className=\"auth-form-card\">\r\n                <h2 className=\"login-title\">تسجيل دخول المعلم / ولي الأمر</h2>\r\n                <form onSubmit={handleLogin} className=\"login-form\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email-input\">البريد الإلكتروني:</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email-input\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            required\r\n                            className=\"form-input\"\r\n                            disabled={loading} // تعطيل الإدخال أثناء التحميل\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password-input\">كلمة المرور:</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password-input\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                            className=\"form-input\"\r\n                            disabled={loading} // تعطيل الإدخال أثناء التحميل\r\n                        />\r\n                    </div>\r\n                    {/* عرض رسائل الخطأ والنجاح */}\r\n                    {error && <div className=\"error-message\">{error}</div>}\r\n                    {message && <div className=\"success-message\">{message}</div>}\r\n                    <button type=\"submit\" className=\"login-button\" disabled={loading}>\r\n                        {loading ? 'جاري تسجيل الدخول...' : 'تسجيل الدخول'}\r\n                    </button>\r\n                </form>\r\n                <button\r\n                    onClick={handleResetPassword}\r\n                    className=\"reset-password-button\"\r\n                    disabled={loading} // تعطيل الزر أثناء التحميل\r\n                >\r\n                    نسيت كلمة المرور؟\r\n                </button>\r\n                <div className=\"auth-link\">\r\n                    ليس لديك حساب؟ <Link to=\"/register\">سجل الآن</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"names":["Login","email","setEmail","useState","password","setPassword","error","setError","message","setMessage","loading","setLoading","navigate","useNavigate","getDashboardPath","useAuth","isValidEmail","test","handleLogin","useCallback","async","e","preventDefault","length","user","signInWithEmailAndPassword","auth","userDocRef","doc","db","uid","userDocSnap","getDoc","exists","userRole","data","role","signOut","err","console","code","handleResetPassword","trim","sendPasswordResetEmail","_jsx","className","children","_jsxs","onSubmit","htmlFor","type","id","value","onChange","target","required","disabled","onClick","Link","to"],"sourceRoot":""}