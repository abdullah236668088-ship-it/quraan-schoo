{"version":3,"file":"static/js/553.6d08cc5c.chunk.js","mappings":"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","sources":["components/CustomModal.js","components/AdminDashboard.js","components/TeacherDashboard.js","components/Dashboard.js"],"sourcesContent":["// src/components/CustomModal.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport '../Styles/CustomModalStyles.css';\r\n\r\nconst CustomModal = ({ isOpen, title, message, children, onConfirm, onCancel, showCancelButton = true, closeOnOverlayClick = false }) => {\r\n    const modalRef = useRef(null);\r\n\r\n    // Effect to manage focus and keyboard accessibility\r\n    // تأثير لإدارة التركيز وإمكانية الوصول عبر لوحة المفاتيح\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            // Focus the modal content when it opens\r\n            // تركيز محتوى المودال عند فتحه\r\n            modalRef.current?.focus();\r\n\r\n            // Add event listener for Escape key to close modal\r\n            // إضافة مستمع حدث لمفتاح Escape لإغلاق المودال\r\n            const handleEscape = (event) => {\r\n                if (event.key === 'Escape') {\r\n                    onCancel(); // Use onCancel to close the modal\r\n                }\r\n            };\r\n            document.addEventListener('keydown', handleEscape);\r\n\r\n            // Cleanup function to remove event listener\r\n            // دالة تنظيف لإزالة مستمع الحدث\r\n            return () => {\r\n                document.removeEventListener('keydown', handleEscape);\r\n            };\r\n        }\r\n    }, [isOpen, onCancel]);\r\n\r\n    // If modal is not open, return null to render nothing\r\n    // إذا لم يكن المودال مفتوحًا، أعد قيمة null لعدم عرض أي شيء\r\n    if (!isOpen) return null;\r\n\r\n    // Handle overlay click to close modal if allowed\r\n    // معالجة النقر على الخلفية لإغلاق المودال إذا كان مسموحًا\r\n    const handleOverlayClick = (e) => {\r\n        if (closeOnOverlayClick && modalRef.current && !modalRef.current.contains(e.target)) {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay\" onClick={handleOverlayClick}>\r\n            <div\r\n                className=\"modal-content\"\r\n                ref={modalRef}\r\n                role=\"dialog\" // ARIA role for dialog\r\n                aria-modal=\"true\" // Indicates that the dialog is modal\r\n                aria-labelledby=\"modal-title\" // Links to the title for accessibility\r\n                aria-describedby=\"modal-message\" // Links to the message for accessibility\r\n                tabIndex=\"-1\" // Makes the modal content focusable\r\n            >\r\n                <h3 id=\"modal-title\" className=\"modal-title\">{title}</h3>\r\n                {message && <p id=\"modal-message\" className=\"modal-message\">{message}</p>}\r\n                {children && <div className=\"modal-body\">{children}</div>} {/* عرض المحتوى المخصص */}\r\n                <div className=\"modal-actions\">\r\n                    <button onClick={onConfirm} className=\"modal-confirm-button\">\r\n                        تأكيد\r\n                    </button>\r\n                    {showCancelButton && (\r\n                        <button onClick={onCancel} className=\"modal-cancel-button\">\r\n                            إلغاء\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { db } from \"../firebaseConfig\";\r\nimport { collection, getDocs, getCountFromServer, getAggregateFromServer, sum, average } from \"firebase/firestore\";\r\nimport { exportToPdf } from '../utils/pdfExporter'; // 1. استيراد دالة التصدير\r\nimport { Pie, Bar } from \"react-chartjs-2\";\r\nimport {\r\n    Chart as ChartJS,\r\n    ArcElement,\r\n    Tooltip,\r\n    Legend,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title\r\n} from 'chart.js';\r\nimport { Link } from 'react-router-dom'; // استيراد Link من react-router-dom\r\nimport '../Styles/AdminDashboardStyles.css'; // استيراد ملف التنسيقات الخارجي\r\n\r\n// Register Chart.js components required for Pie and Bar charts\r\n// تسجيل مكونات Chart.js المطلوبة للرسوم البيانية الدائرية والشريطية\r\nChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title);\r\n\r\nexport default function AdminDashboard() {\r\n    const [stats, setStats] = useState({\r\n        totalStudents: 0,\r\n        totalHalaqat: 0,\r\n        totalGuests: 0,\r\n        totalAdmins: 0, // New: Total Admins\r\n        totalUsers: 0, // New: Total Users\r\n        upcomingActivities: 0,\r\n        totalWeeklyReports: 0, // New: Total Weekly Reports\r\n        averagePagesMemorized: 0, // New: Overall Average Pages Memorized\r\n        averageAttendance: 0, // New: Overall Average Attendance\r\n        studentDistributionByHalaqa: {}, // New: Student distribution by Halaqa\r\n        userRoleDistribution: { labels: [], datasets: [] }, // New: User role distribution\r\n        halaqaNamesMap: {}, // To store halaqa names for chart labels\r\n    });\r\n    const [users, setUsers] = useState([]); // حالة جديدة لتخزين قائمة المستخدمين\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const fetchStats = useCallback(async () => {\r\n        setLoading(true);\r\n        setError(\"\");\r\n        try {\r\n            // --- Performance Improvement: Use Aggregation Queries ---\r\n            // Fetch counts and aggregates directly from the server instead of all documents.\r\n            // This drastically reduces the number of reads and improves performance.\r\n\r\n            const studentsCol = collection(db, \"students\");\r\n            const halaqatCol = collection(db, \"halaqat\");\r\n            const usersCol = collection(db, \"users\");\r\n            const activitiesCol = collection(db, \"activities\");\r\n            const weeklyReportsCol = collection(db, \"weeklyReports\");\r\n\r\n            // Correctly call Promise.all with all necessary queries\r\n            // استدعاء Promise.all بشكل صحيح مع جميع الاستعلامات اللازمة\r\n            const [\r\n                studentsCount,\r\n                halaqatCount,\r\n                usersCount,\r\n                weeklyReportsAggregate,\r\n                usersSnapshot,\r\n                activitiesSnapshot,\r\n                halaqatSnapshot,\r\n                studentsSnapshot\r\n            ] = await Promise.all([\r\n                getCountFromServer(studentsCol),\r\n                getCountFromServer(halaqatCol),\r\n                getCountFromServer(usersCol),\r\n                getAggregateFromServer(weeklyReportsCol, {\r\n                    count: 'count',\r\n                    averagePagesMemorized: average('pagesMemorized'),\r\n                    averageAttendance: average('attendanceDays')\r\n                }),\r\n                getDocs(usersCol), // Still need for role distribution\r\n                getDocs(activitiesCol), // Still need to fetch docs to check dates\r\n                getDocs(halaqatCol), // Still need for names map\r\n                getDocs(studentsCol) // Still need for distribution\r\n            ]);\r\n\r\n            // 2. تخزين بيانات المستخدمين في الحالة لإعادة استخدامها\r\n            const usersList = usersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            setUsers(usersList);\r\n\r\n            // Calculate user role distribution\r\n            // حساب توزيع أدوار المستخدمين\r\n            const userRoles = {};\r\n            usersSnapshot.forEach(doc => {\r\n                const role = doc.data().role;\r\n                userRoles[role] = (userRoles[role] || 0) + 1;\r\n            });\r\n\r\n            const userRoleDistributionData = {\r\n                labels: Object.keys(userRoles).map(role => {\r\n                    // Translate role keys to Arabic for better display\r\n                    if (role === 'admin') return 'مدير';\r\n                    if (role === 'teacher') return 'معلم';\r\n                    if (role === 'guest') return 'ضيف';\r\n                    return role;\r\n                }),\r\n                datasets: [{\r\n                    data: Object.values(userRoles),\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.6)', // Admin\r\n                        'rgba(54, 162, 235, 0.6)', // Teacher\r\n                        'rgba(255, 206, 86, 0.6)', // Guest\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                        'rgba(54, 162, 235, 1)',\r\n                        'rgba(255, 206, 86, 1)',\r\n                    ],\r\n                    borderWidth: 1,\r\n                }]\r\n            };\r\n\r\n            // Create a map of Halaqa IDs to names for the chart\r\n            // إنشاء خريطة لأسماء الحلقات لاستخدامها في الرسم البياني\r\n            const halaqaNamesMap = {};\r\n            halaqatSnapshot.forEach(doc => {\r\n                halaqaNamesMap[doc.id] = doc.data().name;\r\n            });\r\n\r\n            // Calculate student distribution by Halaqa using the map\r\n            // حساب توزيع الطلاب حسب الحلقة باستخدام الخريطة\r\n            const studentDistribution = {};\r\n            studentsSnapshot.forEach(doc => {\r\n                const studentData = doc.data();\r\n                const halaqaId = studentData.halaqaId;\r\n                if (halaqaId && halaqaNamesMap[halaqaId]) {\r\n                    const halaqaName = halaqaNamesMap[halaqaId];\r\n                    studentDistribution[halaqaName] = (studentDistribution[halaqaName] || 0) + 1;\r\n                }\r\n            });\r\n\r\n            // Filter upcoming activities from the fetched activitiesSnapshot\r\n            // تصفية الأنشطة القادمة من البيانات التي تم جلبها\r\n            const now = new Date();\r\n            let upcomingActivitiesCount = 0;\r\n            activitiesSnapshot.forEach(doc => {\r\n                const activityDateStr = doc.data().date;\r\n                const activityTimeStr = doc.data().time;\r\n                if (activityDateStr && activityTimeStr) {\r\n                    const activityDate = new Date(`${activityDateStr}T${activityTimeStr}`);\r\n                    if (activityDate > now) {\r\n                        upcomingActivitiesCount++;\r\n                    }\r\n                }\r\n            });\r\n\r\n            setStats({\r\n                totalStudents: studentsCount.data().count,\r\n                totalHalaqat: halaqatCount.data().count,\r\n                totalTeachers: userRoles['teacher'] || 0, // تم الاشتقاق من مجموعة المستخدمين للاتساق\r\n                totalGuests: userRoles['guest'] || 0,\r\n                totalAdmins: userRoles['admin'] || 0,\r\n                totalUsers: usersCount.data().count,\r\n                upcomingActivities: upcomingActivitiesCount,\r\n                totalWeeklyReports: weeklyReportsAggregate.data().count,\r\n                // Use .data() to access aggregate results and handle potential null/undefined values\r\n                averagePagesMemorized: parseFloat(weeklyReportsAggregate.data().averagePagesMemorized?.toFixed(2) || 0),\r\n                averageAttendance: parseFloat(weeklyReportsAggregate.data().averageAttendance?.toFixed(2) || 0),\r\n                studentDistributionByHalaqa: studentDistribution,\r\n                userRoleDistribution: userRoleDistributionData,\r\n                halaqaNamesMap,\r\n            });\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching dashboard stats:\", err);\r\n            setError(\"فشل في جلب إحصائيات لوحة التحكم: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchStats();\r\n    }, [fetchStats]);\r\n\r\n    // 3. دالة جديدة لتصدير المستخدمين\r\n    const exportUsersPdf = useCallback(() => {\r\n        if (users.length === 0) {\r\n            alert(\"لا يوجد مستخدمون لتصديرهم.\");\r\n            return;\r\n        }\r\n        const title = \"تقرير بيانات المستخدمين\";\r\n        const columns = [\"البريد الإلكتروني\", \"الدور\", \"تاريخ الإنشاء\"];\r\n        const rows = users.map(user => [user.email, user.role || 'غير محدد', user.createdAt?.toDate().toLocaleDateString('ar-EG') || 'غير محدد']);\r\n        exportToPdf(title, columns, rows, \"تقرير_المستخدمين\");\r\n    }, [users]);\r\n\r\n    // Data for Student Distribution by Halaqa Chart\r\n    // بيانات الرسم البياني لتوزيع الطلاب حسب الحلقة\r\n    const studentDistributionChartData = {\r\n        labels: Object.keys(stats.studentDistributionByHalaqa),\r\n        datasets: [\r\n            {\r\n                data: Object.values(stats.studentDistributionByHalaqa),\r\n                backgroundColor: [\r\n                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40',\r\n                    '#E7E9ED', '#8D6E63', '#C0CA33', '#7CB342'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40',\r\n                    '#E7E9ED', '#8D6E63', '#C0CA33', '#7CB342'\r\n                ],\r\n            },\r\n        ],\r\n    };\r\n\r\n    if (loading) {\r\n        return <p className=\"loading-message\">جاري تحميل لوحة تحكم المدير...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p className=\"error-message\">{error}</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"admin-dashboard-container page-container\">\r\n            <h2 className=\"admin-dashboard-title\">لوحة تحكم المدير</h2>\r\n\r\n            <div className=\"stats-summary-grid\">\r\n                <div className=\"stat-card\">\r\n                    <h3>إجمالي الطلاب</h3>\r\n                    <p>{stats.totalStudents}</p>\r\n                </div>\r\n                <div className=\"stat-card\">\r\n                    <h3>إجمالي الحلقات</h3>\r\n                    <p>{stats.totalHalaqat}</p>\r\n                </div>\r\n                <div className=\"stat-card\">\r\n                    <h3>إجمالي المعلمين</h3>\r\n                    <p>{stats.totalTeachers}</p>\r\n                </div>\r\n                <div className=\"stat-card\">\r\n                    <h3>إجمالي المستخدمين</h3>\r\n                    <p>{stats.totalUsers}</p>\r\n                </div>\r\n                <div className=\"stat-card\">\r\n                    <h3>أنشطة قادمة</h3>\r\n                    <p>{stats.upcomingActivities}</p>\r\n                </div>\r\n                <div className=\"stat-card\">\r\n                    <h3>متوسط الصفحات المحفوظة (لكل تقرير)</h3>\r\n                    <p>{stats.averagePagesMemorized}</p>\r\n                </div>\r\n                <div className=\"stat-card\">\r\n                    <h3>متوسط أيام الحضور (لكل تقرير)</h3>\r\n                    <p>{stats.averageAttendance}</p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* تم تغيير اسم الفئة من charts-section إلى charts-grid لمطابقة ملف CSS */}\r\n            <div className=\"charts-grid\">\r\n                <div className=\"chart-card\">\r\n                    <h3>توزيع الطلاب حسب الحلقة</h3>\r\n                    {/* تم إضافة حاوية ذات ارتفاع ثابت لمنع الخطأ */}\r\n                    <div className=\"chart-container\">\r\n                        {Object.keys(stats.studentDistributionByHalaqa).length > 0 ? (\r\n                            <Pie data={studentDistributionChartData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n                        ) : (\r\n                            <p className=\"no-chart-data\">لا توجد بيانات لتوزيع الطلاب حسب الحلقة.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"chart-card\">\r\n                    <h3>توزيع أدوار المستخدمين</h3>\r\n                    <div className=\"chart-container\">\r\n                        {stats.userRoleDistribution.labels.length > 0 ? (\r\n                            <Pie data={stats.userRoleDistribution} options={{ responsive: true, maintainAspectRatio: false }} />\r\n                        ) : (\r\n                            <p className=\"no-chart-data\">لا توجد بيانات لتوزيع المستخدمين.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"quick-links-section\">\r\n                <h3 className=\"quick-links-title\">روابط سريعة</h3>\r\n                <ul className=\"quick-links-list\">\r\n                    <li><Link to=\"/users\" className=\"quick-link-item\">إدارة المستخدمين</Link></li>\r\n                    <li><Link to=\"/halaqat\" className=\"quick-link-item\">إدارة الحلقات</Link></li>\r\n                    <li><Link to=\"/students\" className=\"quick-link-item\">إدارة الطلاب</Link></li>\r\n                    <li><Link to=\"/teachers\" className=\"quick-link-item\">إدارة المعلمين</Link></li>\r\n                    <li><Link to=\"/activities\" className=\"quick-link-item\">إدارة الأنشطة</Link></li>\r\n                    <li><Link to=\"/reports\" className=\"quick-link-item\">التقارير والإحصائيات</Link></li>\r\n                    <li><Link to=\"/weekly-reports\" className=\"quick-link-item\">إضافة تقرير أسبوعي</Link></li>\r\n                    <li><Link to=\"/charts\" className=\"quick-link-item\">الرسوم البيانية العامة</Link></li>\r\n                    {/* 4. إضافة زر تصدير المستخدمين */}\r\n                    <li><button onClick={exportUsersPdf} className=\"quick-link-item button-as-link\">\r\n                        تصدير قائمة المستخدمين (PDF)\r\n                    </button></li>\r\n                    <li><Link to=\"/statistics\" className=\"quick-link-item\">صفحة الإحصائيات</Link></li> {/* رابط جديد لصفحة الإحصائيات */}\r\n                    <li><Link to=\"/student-search-guest\" className=\"quick-link-item\">بحث الطالب (للضيوف)</Link></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { db } from \"../firebaseConfig\";\r\nimport { collection, query, where, getDocs, addDoc, updateDoc, deleteDoc, doc } from \"firebase/firestore\";\r\nimport CustomModal from './CustomModal';\r\nimport '../Styles/TeacherDashboardStyles.css'; // Assuming you have a CSS file for styling\r\n\r\nexport default function TeacherDashboard() {\r\n    const { currentUser } = useAuth();\r\n    const [halaqat, setHalaqat] = useState([]);\r\n    const [teachers, setTeachers] = useState([]); // Kept for teacherName logic, can be optimized later\r\n    const [newHalaqaName, setNewHalaqaName] = useState(\"\");\r\n    const [editingHalaqaId, setEditingHalaqaId] = useState(null);\r\n    const [editingHalaqaName, setEditingHalaqaName] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalConfig, setModalConfig] = useState({});\r\n\r\n    const fetchHalaqatAndTeachers = useCallback(async () => {\r\n        if (!currentUser || !currentUser.uid) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        setError(\"\");\r\n        try {\r\n            const [halaqatSnapshot, teachersSnapshot] = await Promise.all([\r\n                getDocs(query(collection(db, \"halaqat\"), where(\"teacherId\", \"==\", currentUser.uid))),\r\n                getDocs(collection(db, \"teachers\")) // Needed to get teacher's own name\r\n            ]);\r\n\r\n            const halaqatList = halaqatSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            setHalaqat(halaqatList);\r\n\r\n            const teachersList = teachersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n            setTeachers(teachersList);\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching data:\", err);\r\n            setError(\"فشل في جلب البيانات: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentUser]);\r\n\r\n    useEffect(() => {\r\n        fetchHalaqatAndTeachers();\r\n    }, [fetchHalaqatAndTeachers]);\r\n\r\n    const handleAddHalaqa = useCallback(async () => {\r\n        setError(\"\");\r\n        setMessage(\"\");\r\n        if (!newHalaqaName.trim()) {\r\n            setError(\"يرجى إدخال اسم الحلقة.\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            const teacherInfo = teachers.find(t => t.id === currentUser.uid);\r\n            const halaqaData = {\r\n                name: newHalaqaName,\r\n                teacherId: currentUser.uid,\r\n                teacherName: teacherInfo?.name || \"غير معروف\"\r\n            };\r\n            await addDoc(collection(db, \"halaqat\"), halaqaData);\r\n            setNewHalaqaName(\"\");\r\n            setMessage(\"تم إضافة الحلقة بنجاح!\");\r\n            await fetchHalaqatAndTeachers();\r\n        } catch (err) {\r\n            console.error(\"Error adding halaqa:\", err);\r\n            setError(\"فشل في إضافة الحلقة: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [newHalaqaName, currentUser, teachers, fetchHalaqatAndTeachers]);\r\n\r\n    const handleEditClick = useCallback((halaqa) => {\r\n        setEditingHalaqaId(halaqa.id);\r\n        setEditingHalaqaName(halaqa.name);\r\n        setError(\"\");\r\n        setMessage(\"\");\r\n    }, []);\r\n\r\n    const handleUpdateHalaqa = useCallback(async (halaqaId) => {\r\n        setError(\"\");\r\n        setMessage(\"\");\r\n        if (!editingHalaqaName.trim()) {\r\n            setError(\"يرجى إدخال اسم الحلقة.\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            const halaqaDocRef = doc(db, \"halaqat\", halaqaId);\r\n            const teacherInfo = teachers.find(t => t.id === currentUser.uid);\r\n            const updatedData = {\r\n                name: editingHalaqaName,\r\n                teacherId: currentUser.uid,\r\n                teacherName: teacherInfo?.name || \"غير معروف\"\r\n            };\r\n            await updateDoc(halaqaDocRef, updatedData);\r\n            setEditingHalaqaId(null);\r\n            setEditingHalaqaName(\"\");\r\n            setMessage(\"تم تحديث الحلقة بنجاح!\");\r\n            await fetchHalaqatAndTeachers();\r\n        } catch (err) {\r\n            console.error(\"Error updating halaqa:\", err);\r\n            setError(\"فشل في تحديث الحلقة: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [editingHalaqaName, currentUser, teachers, fetchHalaqatAndTeachers]);\r\n\r\n    const handleDeleteHalaqa = useCallback((id) => {\r\n        setModalConfig({\r\n            title: \"تأكيد الحذف\",\r\n            message: \"هل أنت متأكد أنك تريد حذف هذه الحلقة؟ سيتم حذف جميع الطلاب المرتبطين بها تلقائيًا من قبل الخادم.\",\r\n            onConfirm: async () => {\r\n                setShowModal(false);\r\n                setLoading(true);\r\n                setError(\"\");\r\n                setMessage(\"\");\r\n                try {\r\n                    // Simply delete the halaqa document. The Cloud Function will handle the rest.\r\n                    // فقط قم بحذف مستند الحلقة. الدالة السحابية ستتكفل بالباقي.\r\n                    await deleteDoc(doc(db, \"halaqat\", id));\r\n                    setMessage(\"تم حذف الحلقة بنجاح! سيتم حذف الطلاب المرتبطين بها في الخلفية.\");\r\n                    await fetchHalaqatAndTeachers();\r\n                } catch (err) {\r\n                    console.error(\"Error deleting halaqa:\", err);\r\n                    setError(\"فشل في حذف الحلقة: \" + err.message);\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            },\r\n            onCancel: () => setShowModal(false),\r\n            showCancelButton: true,\r\n        });\r\n        setShowModal(true);\r\n    }, [fetchHalaqatAndTeachers]);\r\n\r\n    return (\r\n        <div className=\"dashboard-container page-container\">\r\n            <h2 className=\"dashboard-title\">لوحة تحكم المعلم</h2>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {message && <p className=\"success-message\">{message}</p>}\r\n\r\n            <div className=\"halaqat-list-section card\">\r\n                <h3>الحلقات الخاصة بي</h3>\r\n                {loading ? <p className=\"loading-message\">جاري تحميل الحلقات...</p> :\r\n                    halaqat.length === 0 ? <p className=\"no-data-message\">لا توجد حلقات مرتبطة بك بعد.</p> :\r\n                        <ul className=\"halaqat-list\">\r\n                            {halaqat.map((halaqa) => (\r\n                                <li key={halaqa.id} className=\"halaqa-item\">\r\n                                    {editingHalaqaId === halaqa.id ? (\r\n                                        <div className=\"edit-halaqa-form\">\r\n                                            <input type=\"text\" value={editingHalaqaName} onChange={(e) => setEditingHalaqaName(e.target.value)} className=\"edit-halaqa-input\" />\r\n                                            <button onClick={() => handleUpdateHalaqa(halaqa.id)} className=\"save-button\" disabled={loading}>حفظ</button>\r\n                                            <button onClick={() => setEditingHalaqaId(null)} className=\"cancel-button\" disabled={loading}>إلغاء</button>\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div className=\"halaqa-details\">\r\n                                            <span>{halaqa.name}</span>\r\n                                            <div className=\"halaqa-actions\">\r\n                                                <button onClick={() => handleEditClick(halaqa)} className=\"edit-button\">تعديل</button>\r\n                                                <button onClick={() => handleDeleteHalaqa(halaqa.id)} className=\"delete-button\">حذف</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"add-halaqa-section card\">\r\n                <h3>إضافة حلقة جديدة</h3>\r\n                <input type=\"text\" placeholder=\"اسم الحلقة الجديدة\" value={newHalaqaName} onChange={(e) => setNewHalaqaName(e.target.value)} className=\"new-halaqa-input\" />\r\n                <button onClick={handleAddHalaqa} className=\"add-halaqa-button\" disabled={loading}>\r\n                    {loading ? \"جاري الإضافة...\" : \"إضافة حلقة\"}\r\n                </button>\r\n            </div>\r\n\r\n            <CustomModal isOpen={showModal} {...modalConfig} />\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport AdminDashboard from \"./AdminDashboard\";\r\nimport TeacherDashboard from \"./TeacherDashboard\";\r\nimport '../Styles/DashboardStyles.css';\r\n\r\n/**\r\n * Dashboard component that acts as a router based on user role.\r\n * It renders the appropriate dashboard (Admin or Teacher) or an unauthorized message.\r\n */\r\nexport default function Dashboard() {\r\n    const { userRole } = useAuth();\r\n\r\n    // عرض لوحة تحكم المدير إذا كان الدور \"أدمن\"\r\n    if (userRole === \"admin\") {\r\n        return <AdminDashboard />;\r\n    }\r\n\r\n    // عرض لوحة تحكم المعلم إذا كان الدور \"معلم\"\r\n    if (userRole === \"teacher\") {\r\n        return <TeacherDashboard />;\r\n    }\r\n\r\n    // إذا لم يكن الدور \"أدمن\" أو \"معلم\"، سيعرض هذا\r\n    return <div className=\"unauthorized-message\">ليس لديك الصلاحية للوصول إلى هذه الصفحة.</div>;\r\n}\r\n"],"names":["_ref","isOpen","title","message","children","onConfirm","onCancel","showCancelButton","closeOnOverlayClick","modalRef","useRef","useEffect","_modalRef$current","current","focus","handleEscape","event","key","document","addEventListener","removeEventListener","_jsx","className","onClick","e","contains","target","_jsxs","ref","role","tabIndex","id","AdminDashboard","stats","setStats","useState","totalStudents","totalHalaqat","totalGuests","totalAdmins","totalUsers","upcomingActivities","totalWeeklyReports","averagePagesMemorized","averageAttendance","studentDistributionByHalaqa","userRoleDistribution","labels","datasets","halaqaNamesMap","users","setUsers","loading","setLoading","error","setError","fetchStats","useCallback","async","_weeklyReportsAggrega","_weeklyReportsAggrega2","studentsCol","collection","db","halaqatCol","usersCol","activitiesCol","weeklyReportsCol","studentsCount","halaqatCount","usersCount","weeklyReportsAggregate","usersSnapshot","activitiesSnapshot","halaqatSnapshot","studentsSnapshot","Promise","all","getCountFromServer","getAggregateFromServer","count","average","getDocs","usersList","docs","map","doc","data","userRoles","forEach","userRoleDistributionData","Object","keys","values","backgroundColor","borderColor","borderWidth","name","studentDistribution","halaqaId","halaqaName","now","Date","upcomingActivitiesCount","activityDateStr","date","activityTimeStr","time","totalTeachers","parseFloat","toFixed","err","console","exportUsersPdf","length","alert","rows","user","_user$createdAt","email","createdAt","toDate","toLocaleDateString","exportToPdf","studentDistributionChartData","hoverBackgroundColor","Pie","options","responsive","maintainAspectRatio","Link","to","ChartJS","register","ArcElement","Tooltip","Legend","CategoryScale","LinearScale","BarElement","Title","TeacherDashboard","currentUser","useAuth","halaqat","setHalaqat","teachers","setTeachers","newHalaqaName","setNewHalaqaName","editingHalaqaId","setEditingHalaqaId","editingHalaqaName","setEditingHalaqaName","setMessage","showModal","setShowModal","modalConfig","setModalConfig","fetchHalaqatAndTeachers","uid","teachersSnapshot","query","where","halaqatList","teachersList","handleAddHalaqa","trim","teacherInfo","find","t","halaqaData","teacherId","teacherName","addDoc","handleEditClick","halaqa","handleUpdateHalaqa","halaqaDocRef","updatedData","updateDoc","handleDeleteHalaqa","deleteDoc","type","value","onChange","disabled","placeholder","CustomModal","Dashboard","userRole"],"sourceRoot":""}