{"version":3,"file":"static/js/738.6eb781ef.chunk.js","mappings":"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","sources":["components/CustomModal.js","components/WeeklyReports.js"],"sourcesContent":["// src/components/CustomModal.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport '../Styles/CustomModalStyles.css';\r\n\r\nconst CustomModal = ({ isOpen, title, message, children, onConfirm, onCancel, showCancelButton = true, closeOnOverlayClick = false }) => {\r\n    const modalRef = useRef(null);\r\n\r\n    // Effect to manage focus and keyboard accessibility\r\n    // تأثير لإدارة التركيز وإمكانية الوصول عبر لوحة المفاتيح\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            // Focus the modal content when it opens\r\n            // تركيز محتوى المودال عند فتحه\r\n            modalRef.current?.focus();\r\n\r\n            // Add event listener for Escape key to close modal\r\n            // إضافة مستمع حدث لمفتاح Escape لإغلاق المودال\r\n            const handleEscape = (event) => {\r\n                if (event.key === 'Escape') {\r\n                    onCancel(); // Use onCancel to close the modal\r\n                }\r\n            };\r\n            document.addEventListener('keydown', handleEscape);\r\n\r\n            // Cleanup function to remove event listener\r\n            // دالة تنظيف لإزالة مستمع الحدث\r\n            return () => {\r\n                document.removeEventListener('keydown', handleEscape);\r\n            };\r\n        }\r\n    }, [isOpen, onCancel]);\r\n\r\n    // If modal is not open, return null to render nothing\r\n    // إذا لم يكن المودال مفتوحًا، أعد قيمة null لعدم عرض أي شيء\r\n    if (!isOpen) return null;\r\n\r\n    // Handle overlay click to close modal if allowed\r\n    // معالجة النقر على الخلفية لإغلاق المودال إذا كان مسموحًا\r\n    const handleOverlayClick = (e) => {\r\n        if (closeOnOverlayClick && modalRef.current && !modalRef.current.contains(e.target)) {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay\" onClick={handleOverlayClick}>\r\n            <div\r\n                className=\"modal-content\"\r\n                ref={modalRef}\r\n                role=\"dialog\" // ARIA role for dialog\r\n                aria-modal=\"true\" // Indicates that the dialog is modal\r\n                aria-labelledby=\"modal-title\" // Links to the title for accessibility\r\n                aria-describedby=\"modal-message\" // Links to the message for accessibility\r\n                tabIndex=\"-1\" // Makes the modal content focusable\r\n            >\r\n                <h3 id=\"modal-title\" className=\"modal-title\">{title}</h3>\r\n                {message && <p id=\"modal-message\" className=\"modal-message\">{message}</p>}\r\n                {children && <div className=\"modal-body\">{children}</div>} {/* عرض المحتوى المخصص */}\r\n                <div className=\"modal-actions\">\r\n                    <button onClick={onConfirm} className=\"modal-confirm-button\">\r\n                        تأكيد\r\n                    </button>\r\n                    {showCancelButton && (\r\n                        <button onClick={onCancel} className=\"modal-cancel-button\">\r\n                            إلغاء\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { db } from \"../firebaseConfig\"; // تم إزالة auth لأنه غير مستخدم مباشرة هنا\r\nimport {\r\n    collection,\r\n    query,\r\n    where,\r\n    getDocs,\r\n    addDoc,\r\n    serverTimestamp,\r\n    // documentId, // تم إزالة documentId لأنه غير مستخدم\r\n    orderBy,\r\n    limit,\r\n    doc,\r\n    getDoc,\r\n    onSnapshot\r\n} from \"firebase/firestore\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport '../Styles/WeeklyReportsStyles.css';\r\nimport CustomModal from '../components/CustomModal';\r\n\r\n// قائمة بأسماء سور القرآن الكريم للبحث التلقائي\r\nconst surahNames = [\r\n    \"الفاتحة\", \"البقرة\", \"آل عمران\", \"النساء\", \"المائدة\", \"الأنعام\", \"الأعراف\", \"الأنفال\", \"التوبة\", \"يونس\",\r\n    \"هود\", \"يوسف\", \"الرعد\", \"إبراهيم\", \"الحجر\", \"النحل\", \"الإسراء\", \"الكهف\", \"مريم\", \"طه\",\r\n    \"الأنبياء\", \"الحج\", \"المؤمنون\", \"النور\", \"الفرقان\", \"الشعراء\", \"النمل\", \"القصص\", \"العنكبوت\", \"الروم\",\r\n    \"لقمان\", \"السجدة\", \"الأحزاب\", \"سبأ\", \"فاطر\", \"يس\", \"الصافات\", \"ص\", \"الزمر\", \"غافر\",\r\n    \"فصلت\", \"الشورى\", \"الزخرف\", \"الدخان\", \"الجاثية\", \"الأحقاف\", \"محمد\", \"الفتح\", \"الحجرات\", \"ق\",\r\n    \"الذاريات\", \"الطور\", \"النجم\", \"القمر\", \"الرحمن\", \"الواقعة\", \"الحديد\", \"المجادلة\", \"الحشر\", \"الممتحنة\",\r\n    \"الصف\", \"الجمعة\", \"المنافقون\", \"التغابن\", \"الطلاق\", \"التحريم\", \"الملك\", \"القلم\", \"الحاقة\", \"المعارج\",\r\n    \"نوح\", \"الجن\", \"المزمل\", \"المدثر\", \"القيامة\", \"الإنسان\", \"المرسلات\", \"النبأ\", \"النازعات\", \"عبس\",\r\n    \"التكوير\", \"الإنفطار\", \"المطففين\", \"الإنشقاق\", \"البروج\", \"الطارق\", \"الأعلى\", \"الغاشية\", \"الفجر\", \"البلد\",\r\n    \"الشمس\", \"الليل\", \"الضحى\", \"الشرح\", \"التين\", \"العلق\", \"القدر\", \"البينة\", \"الزلزلة\", \"العاديات\",\r\n    \"القارعة\", \"التكاثر\", \"العصر\", \"الهمزة\", \"الفيل\", \"قريش\", \"الماعون\", \"الكوثر\", \"الكافرون\", \"النصر\",\r\n    \"المسد\", \"الإخلاص\", \"الفلق\", \"الناس\"\r\n];\r\n\r\nexport default function WeeklyReports() {\r\n    const { currentUser, userRole } = useAuth();\r\n    const [students, setStudents] = useState([]);\r\n    const [halaqat, setHalaqat] = useState([]);\r\n    const [selectedStudentId, setSelectedStudentId] = useState(\"\");\r\n    const [selectedHalaqaId, setSelectedHalaqaId] = useState(\"\");\r\n    const [reportDate, setReportDate] = useState(\"\");\r\n    const [pagesMemorized, setPagesMemorized] = useState(0);\r\n    const [partsRevised, setPartsRevised] = useState(0);\r\n    const [attendanceDays, setAttendanceDays] = useState(0);\r\n    const [notes, setNotes] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\"); // لرسائل النجاح\r\n\r\n    // حالات المودال\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalConfig, setModalConfig] = useState({});\r\n\r\n    // حالة للحفظ الجديد (للبحث التلقائي)\r\n    const [newMemorization, setNewMemorization] = useState(\"\");\r\n    const [filteredSurahs, setFilteredSurahs] = useState([]);\r\n\r\n    // دالة لحساب التقييم بناءً على المدخلات\r\n    const calculatedRating = useCallback(() => {\r\n        // يمكن تعديل هذه المعادلة لتناسب معايير التقييم الخاصة بك\r\n        const memScore = (pagesMemorized / 10) * 40; // افتراض: كل 10 صفحات = 40 نقطة\r\n        const revScore = (partsRevised / 5) * 30;   // افتراض: كل 5 أجزاء = 30 نقطة\r\n        const attScore = (attendanceDays / 6) * 30; // افتراض: 6 أيام حضور = 30 نقطة\r\n        const total = memScore + revScore + attScore;\r\n        return Math.min(100, Math.round(total)); // لا يتجاوز 100\r\n    }, [pagesMemorized, partsRevised, attendanceDays]);\r\n\r\n    // جلب الطلاب والحلقات المرتبطة بالمعلم الحالي\r\n    useEffect(() => {\r\n        if (!currentUser || !currentUser.uid || userRole !== \"teacher\") {\r\n            setLoading(false);\r\n            setError(\"ليس لديك الصلاحية لإضافة تقارير أسبوعية.\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        setError(\"\");\r\n\r\n        let unsubscribeHalaqat = () => { };\r\n        let unsubscribeStudentsArray = []; // مصفوفة لتخزين دوال إلغاء الاشتراك للطلاب\r\n\r\n        // Listener for Halaqat\r\n        const setupHalaqatListener = () => {\r\n            const halaqatQueryRef = query(collection(db, \"halaqat\"), where(\"teacherId\", \"==\", currentUser.uid));\r\n            unsubscribeHalaqat = onSnapshot(halaqatQueryRef, (halaqatSnapshot) => {\r\n                const halaqatList = halaqatSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n                setHalaqat(halaqatList);\r\n\r\n                const teacherHalaqaIds = halaqatList.map(h => h.id);\r\n\r\n                // إلغاء الاشتراك من المستمعين السابقين للطلاب قبل إعداد مستمعين جدد\r\n                unsubscribeStudentsArray.forEach(unsub => unsub());\r\n                unsubscribeStudentsArray = []; // تفريغ المصفوفة\r\n\r\n                if (teacherHalaqaIds.length > 0) {\r\n                    // إعداد مستمعي الطلاب الجدد\r\n                    unsubscribeStudentsArray = setupStudentsListener(teacherHalaqaIds);\r\n                } else {\r\n                    setStudents([]);\r\n                    setLoading(false);\r\n                }\r\n            }, (err) => {\r\n                console.error(\"Error fetching halaqat in real-time:\", err);\r\n                setError(\"فشل في جلب بيانات الحلقات في الوقت الفعلي: \" + err.message);\r\n                setLoading(false);\r\n            });\r\n        };\r\n\r\n        // Listener for Students (معالجة قيد 'in' query)\r\n        const setupStudentsListener = (teacherHalaqaIds) => {\r\n            if (teacherHalaqaIds.length === 0) {\r\n                setStudents([]);\r\n                setLoading(false);\r\n                return [];\r\n            }\r\n\r\n            const unsubscribes = [];\r\n            const chunkSize = 10; // الحد الأقصى لعناصر 'in' query\r\n            const chunks = [];\r\n            for (let i = 0; i < teacherHalaqaIds.length; i += chunkSize) {\r\n                chunks.push(teacherHalaqaIds.slice(i, i + chunkSize));\r\n            }\r\n\r\n            // استخدام Map لتخزين الطلاب من كل جزء ودمجهم لاحقًا\r\n            const studentsByChunk = new Map();\r\n            let initialLoadsCompleted = 0;\r\n\r\n            chunks.forEach((chunk, index) => {\r\n                const studentsQueryRef = query(collection(db, \"students\"), where(\"halaqaId\", \"in\", chunk));\r\n                const unsubscribe = onSnapshot(studentsQueryRef, (studentsSnapshot) => {\r\n                    const chunkStudents = studentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n                    studentsByChunk.set(index, chunkStudents); // تخزين الطلاب لهذا الجزء\r\n\r\n                    if (initialLoadsCompleted < chunks.length) {\r\n                        initialLoadsCompleted++;\r\n                    }\r\n\r\n                    // عندما تكتمل جميع التحميلات الأولية (أو عند أي تحديث لاحق)، قم بدمج وتحديث حالة الطلاب\r\n                    if (initialLoadsCompleted === chunks.length) {\r\n                        const mergedStudents = Array.from(studentsByChunk.values()).flat();\r\n                        // إزالة أي تكرارات إذا كان الطالب يمكن أن ينتمي لأكثر من حلقة (غير محتمل في هذا السياق ولكنها ممارسة جيدة)\r\n                        const uniqueStudents = Array.from(new Map(mergedStudents.map(s => [s.id, s])).values());\r\n                        setStudents(uniqueStudents);\r\n                        setLoading(false);\r\n                    }\r\n                }, (err) => {\r\n                    console.error(`Error fetching students for chunk ${index} in real-time:`, err);\r\n                    setError(\"فشل في جلب بيانات الطلاب في الوقت الفعلي: \" + err.message);\r\n                    setLoading(false);\r\n                });\r\n                unsubscribes.push(unsubscribe);\r\n            });\r\n            return unsubscribes; // إرجاع مصفوفة دوال إلغاء الاشتراك\r\n        };\r\n\r\n        setupHalaqatListener(); // بدء العملية\r\n\r\n        // دالة التنظيف لإلغاء الاشتراك من جميع المستمعين\r\n        return () => {\r\n            unsubscribeHalaqat();\r\n            unsubscribeStudentsArray.forEach(unsub => unsub());\r\n        };\r\n\r\n    }, [currentUser, userRole]); // اعتماديات useEffect\r\n\r\n    // تحديث قائمة الطلاب عند تغيير الحلقة\r\n    const getStudentsInSelectedHalaqa = useCallback(() => {\r\n        if (!selectedHalaqaId) {\r\n            return students; // إذا لم يتم اختيار حلقة، اعرض جميع الطلاب المرتبطين بالمعلم\r\n        }\r\n        return students.filter(student => student.halaqaId === selectedHalaqaId);\r\n    }, [students, selectedHalaqaId]);\r\n\r\n    // دالة لمسح النموذج\r\n    const resetForm = useCallback(() => {\r\n        setSelectedStudentId(\"\");\r\n        setSelectedHalaqaId(\"\");\r\n        setReportDate(\"\");\r\n        setPagesMemorized(0);\r\n        setPartsRevised(0);\r\n        setAttendanceDays(0);\r\n        setNotes(\"\");\r\n        setNewMemorization(\"\");\r\n        setFilteredSurahs([]);\r\n        setError(\"\");\r\n        setMessage(\"\");\r\n    }, []);\r\n\r\n    // دالة للتعامل مع البحث التلقائي عن السور\r\n    const handleMemorizationChange = useCallback((e) => {\r\n        const value = e.target.value;\r\n        setNewMemorization(value);\r\n        if (value.length > 0) {\r\n            const filtered = surahNames.filter(surah =>\r\n                surah.toLowerCase().includes(value.toLowerCase())\r\n            );\r\n            setFilteredSurahs(filtered);\r\n        } else {\r\n            setFilteredSurahs([]);\r\n        }\r\n    }, []);\r\n\r\n    const selectSurah = useCallback((surah) => {\r\n        setNewMemorization(surah);\r\n        setFilteredSurahs([]);\r\n    }, []);\r\n\r\n    // دالة لإرسال التقرير الأسبوعي\r\n    const handleSubmit = useCallback(async (e) => {\r\n        e.preventDefault();\r\n        setError(\"\");\r\n        setMessage(\"\");\r\n\r\n        // التحقق من صحة المدخلات\r\n        if (!selectedStudentId || !selectedHalaqaId || !reportDate) {\r\n            setError(\"الرجاء اختيار الطالب والحلقة وتاريخ التقرير.\");\r\n            return;\r\n        }\r\n        if (pagesMemorized < 0 || partsRevised < 0 || attendanceDays < 0 || attendanceDays > 6) {\r\n            setError(\"الرجاء إدخال قيم صحيحة للحفظ والمراجعة وأيام الحضور (0-6).\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            const studentDoc = await getDoc(doc(db, \"students\", selectedStudentId));\r\n            const studentData = studentDoc.exists() ? studentDoc.data() : null;\r\n\r\n            if (!studentData) {\r\n                setError(\"الطالب المحدد غير موجود.\");\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            // تحديث الحفظ الحالي للطالب\r\n            await updateDoc(doc(db, \"students\", selectedStudentId), {\r\n                memorization: newMemorization || studentData.memorization, // تحديث الحفظ إذا تم إدخال جديد\r\n            });\r\n\r\n            // إضافة التقرير الأسبوعي\r\n            await addDoc(collection(db, \"weeklyReports\"), {\r\n                studentId: selectedStudentId,\r\n                halaqaId: selectedHalaqaId,\r\n                teacherId: currentUser.uid,\r\n                reportDate: new Date(reportDate), // تحويل التاريخ إلى كائن Date\r\n                pagesMemorized: parseInt(pagesMemorized),\r\n                partsRevised: parseInt(partsRevised),\r\n                attendanceDays: parseInt(attendanceDays),\r\n                rating: calculatedRating(),\r\n                notes: notes,\r\n                createdAt: serverTimestamp(), // ختم الوقت\r\n            });\r\n\r\n            setModalConfig({\r\n                title: \"تقرير أسبوعي\",\r\n                message: \"تم حفظ التقرير الأسبوعي بنجاح!\",\r\n                onConfirm: () => {\r\n                    setShowModal(false);\r\n                    resetForm(); // مسح النموذج بعد الحفظ الناجح\r\n                },\r\n                showCancelButton: false,\r\n            });\r\n            setShowModal(true);\r\n\r\n        } catch (err) {\r\n            console.error(\"Error submitting weekly report:\", err);\r\n            setError(\"فشل في حفظ التقرير: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [selectedStudentId, selectedHalaqaId, reportDate, pagesMemorized, partsRevised, attendanceDays, notes, newMemorization, calculatedRating, currentUser, resetForm]);\r\n\r\n\r\n    if (userRole !== \"teacher\") {\r\n        return <p className=\"unauthorized-message\">ليس لديك الصلاحية لإضافة تقارير أسبوعية.</p>;\r\n    }\r\n\r\n    if (loading) {\r\n        return <p className=\"loading-message\">جاري تحميل البيانات...</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"weekly-reports-container page-container\">\r\n            <h2 className=\"weekly-reports-title\">إضافة تقرير أسبوعي</h2>\r\n\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {message && <p className=\"success-message\">{message}</p>}\r\n\r\n            <form onSubmit={handleSubmit} className=\"report-form card\">\r\n                <div className=\"form-grid\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"halaqa-select\">اختر الحلقة:</label>\r\n                        <select\r\n                            id=\"halaqa-select\"\r\n                            value={selectedHalaqaId}\r\n                            onChange={(e) => {\r\n                                setSelectedHalaqaId(e.target.value);\r\n                                setSelectedStudentId(\"\"); // مسح اختيار الطالب عند تغيير الحلقة\r\n                            }}\r\n                            className=\"form-select\"\r\n                            required\r\n                            disabled={loading}\r\n                        >\r\n                            <option value=\"\">اختر حلقة</option>\r\n                            {halaqat.map((halaqa) => (\r\n                                <option key={halaqa.id} value={halaqa.id}>\r\n                                    {halaqa.name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"student-select\">اختر الطالب:</label>\r\n                        <select\r\n                            id=\"student-select\"\r\n                            value={selectedStudentId}\r\n                            onChange={(e) => setSelectedStudentId(e.target.value)}\r\n                            className=\"form-select\"\r\n                            required\r\n                            disabled={loading || !selectedHalaqaId}\r\n                        >\r\n                            <option value=\"\">اختر طالب</option>\r\n                            {getStudentsInSelectedHalaqa().map((student) => (\r\n                                <option key={student.id} value={student.id}>\r\n                                    {student.name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"report-date\">تاريخ التقرير:</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            id=\"report-date\"\r\n                            value={reportDate}\r\n                            onChange={(e) => setReportDate(e.target.value)}\r\n                            className=\"form-input\"\r\n                            required\r\n                            disabled={loading}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"pages-memorized\">الصفحات المحفوظة:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"pages-memorized\"\r\n                            min=\"0\"\r\n                            value={pagesMemorized}\r\n                            onChange={(e) => setPagesMemorized(e.target.value)}\r\n                            className=\"form-input\"\r\n                            required\r\n                            disabled={loading}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"parts-revised\">الأجزاء المراجعة:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"parts-revised\"\r\n                            min=\"0\"\r\n                            value={partsRevised}\r\n                            onChange={(e) => setPartsRevised(e.target.value)}\r\n                            className=\"form-input\"\r\n                            required\r\n                            disabled={loading}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"attendance-days\">أيام الحضور (0-6):</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"attendance-days\"\r\n                            min=\"0\"\r\n                            max=\"6\"\r\n                            value={attendanceDays}\r\n                            onChange={(e) => setAttendanceDays(e.target.value)}\r\n                            className=\"form-input\"\r\n                            required\r\n                            disabled={loading}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"new-memorization\">الحفظ الجديد (اسم السورة):</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"new-memorization\"\r\n                            value={newMemorization}\r\n                            onChange={handleMemorizationChange}\r\n                            placeholder=\"مثال: البقرة\"\r\n                            className=\"form-input\"\r\n                            disabled={loading}\r\n                        />\r\n                        {filteredSurahs.length > 0 && newMemorization.length > 0 && (\r\n                            <ul className=\"autocomplete-results\">\r\n                                {filteredSurahs.map((surah, index) => (\r\n                                    <li key={index} onClick={() => selectSurah(surah)}>\r\n                                        {surah}\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"rating\">التقييم (0-100):</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"rating\"\r\n                            min=\"0\"\r\n                            max=\"100\"\r\n                            value={calculatedRating()}\r\n                            readOnly\r\n                            className=\"form-input read-only-input\"\r\n                            disabled={loading}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-group full-width\">\r\n                        <label htmlFor=\"notes\">ملاحظات:</label>\r\n                        <textarea\r\n                            id=\"notes\"\r\n                            value={notes}\r\n                            onChange={(e) => setNotes(e.target.value)}\r\n                            className=\"form-textarea\"\r\n                            disabled={loading}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <button type=\"submit\" className=\"submit-button\" disabled={loading}>\r\n                    {loading ? \"جاري الحفظ...\" : \"حفظ التقرير\"}\r\n                </button>\r\n            </form>\r\n\r\n            {/* مودال التأكيد */}\r\n            <CustomModal\r\n                isOpen={showModal}\r\n                title={modalConfig.title}\r\n                message={modalConfig.message}\r\n                onConfirm={modalConfig.onConfirm}\r\n                onCancel={modalConfig.onCancel}\r\n                showCancelButton={modalConfig.showCancelButton}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n"],"names":["_ref","isOpen","title","message","children","onConfirm","onCancel","showCancelButton","closeOnOverlayClick","modalRef","useRef","useEffect","_modalRef$current","current","focus","handleEscape","event","key","document","addEventListener","removeEventListener","_jsx","className","onClick","e","contains","target","_jsxs","ref","role","tabIndex","id","surahNames","WeeklyReports","currentUser","userRole","useAuth","students","setStudents","useState","halaqat","setHalaqat","selectedStudentId","setSelectedStudentId","selectedHalaqaId","setSelectedHalaqaId","reportDate","setReportDate","pagesMemorized","setPagesMemorized","partsRevised","setPartsRevised","attendanceDays","setAttendanceDays","notes","setNotes","loading","setLoading","error","setError","setMessage","showModal","setShowModal","modalConfig","setModalConfig","newMemorization","setNewMemorization","filteredSurahs","setFilteredSurahs","calculatedRating","useCallback","total","Math","min","round","uid","unsubscribeHalaqat","unsubscribeStudentsArray","setupStudentsListener","teacherHalaqaIds","length","unsubscribes","chunks","i","push","slice","studentsByChunk","Map","initialLoadsCompleted","forEach","chunk","index","studentsQueryRef","query","collection","db","where","unsubscribe","onSnapshot","studentsSnapshot","chunkStudents","docs","map","doc","data","set","mergedStudents","Array","from","values","flat","uniqueStudents","s","err","console","setupHalaqatListener","halaqatQueryRef","halaqatSnapshot","halaqatList","h","unsub","getStudentsInSelectedHalaqa","filter","student","halaqaId","resetForm","handleMemorizationChange","value","filtered","surah","toLowerCase","includes","selectSurah","handleSubmit","async","preventDefault","studentDoc","getDoc","studentData","exists","updateDoc","memorization","addDoc","studentId","teacherId","Date","parseInt","rating","createdAt","serverTimestamp","onSubmit","htmlFor","onChange","required","disabled","halaqa","name","type","max","placeholder","readOnly","CustomModal"],"sourceRoot":""}