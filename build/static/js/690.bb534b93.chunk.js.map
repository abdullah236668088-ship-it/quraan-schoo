{"version":3,"file":"static/js/690.bb534b93.chunk.js","mappings":"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","sources":["components/CustomModal.js","utils/csvImporter.js","components/StudentManagement.js"],"sourcesContent":["// src/components/CustomModal.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport '../Styles/CustomModalStyles.css';\r\n\r\nconst CustomModal = ({ isOpen, title, message, children, onConfirm, onCancel, showCancelButton = true, closeOnOverlayClick = false }) => {\r\n    const modalRef = useRef(null);\r\n\r\n    // Effect to manage focus and keyboard accessibility\r\n    // تأثير لإدارة التركيز وإمكانية الوصول عبر لوحة المفاتيح\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            // Focus the modal content when it opens\r\n            // تركيز محتوى المودال عند فتحه\r\n            modalRef.current?.focus();\r\n\r\n            // Add event listener for Escape key to close modal\r\n            // إضافة مستمع حدث لمفتاح Escape لإغلاق المودال\r\n            const handleEscape = (event) => {\r\n                if (event.key === 'Escape') {\r\n                    onCancel(); // Use onCancel to close the modal\r\n                }\r\n            };\r\n            document.addEventListener('keydown', handleEscape);\r\n\r\n            // Cleanup function to remove event listener\r\n            // دالة تنظيف لإزالة مستمع الحدث\r\n            return () => {\r\n                document.removeEventListener('keydown', handleEscape);\r\n            };\r\n        }\r\n    }, [isOpen, onCancel]);\r\n\r\n    // If modal is not open, return null to render nothing\r\n    // إذا لم يكن المودال مفتوحًا، أعد قيمة null لعدم عرض أي شيء\r\n    if (!isOpen) return null;\r\n\r\n    // Handle overlay click to close modal if allowed\r\n    // معالجة النقر على الخلفية لإغلاق المودال إذا كان مسموحًا\r\n    const handleOverlayClick = (e) => {\r\n        if (closeOnOverlayClick && modalRef.current && !modalRef.current.contains(e.target)) {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay\" onClick={handleOverlayClick}>\r\n            <div\r\n                className=\"modal-content\"\r\n                ref={modalRef}\r\n                role=\"dialog\" // ARIA role for dialog\r\n                aria-modal=\"true\" // Indicates that the dialog is modal\r\n                aria-labelledby=\"modal-title\" // Links to the title for accessibility\r\n                aria-describedby=\"modal-message\" // Links to the message for accessibility\r\n                tabIndex=\"-1\" // Makes the modal content focusable\r\n            >\r\n                <h3 id=\"modal-title\" className=\"modal-title\">{title}</h3>\r\n                {message && <p id=\"modal-message\" className=\"modal-message\">{message}</p>}\r\n                {children && <div className=\"modal-body\">{children}</div>} {/* عرض المحتوى المخصص */}\r\n                <div className=\"modal-actions\">\r\n                    <button onClick={onConfirm} className=\"modal-confirm-button\">\r\n                        تأكيد\r\n                    </button>\r\n                    {showCancelButton && (\r\n                        <button onClick={onCancel} className=\"modal-cancel-button\">\r\n                            إلغاء\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomModal;\r\n","// src/utils/csvImporter.js\r\nimport { collection, doc, writeBatch } from \"firebase/firestore\";\r\n\r\n/**\r\n * دالة لاستيراد الطلاب من ملف CSV إلى Firestore.\r\n * تتعامل مع قراءة الملف، تحليل البيانات، والتحقق من صحتها، ثم كتابتها إلى Firestore كدفعة.\r\n *\r\n * @param {File} csvFile - ملف CSV المراد استيراده.\r\n * @param {object} db - كائن قاعدة بيانات Firestore.\r\n * @param {function} validateStudentData - دالة للتحقق من صحة بيانات كل طالب (يجب توفيرها من المكون الذي يستدعيها).\r\n * @param {function} setLoading - دالة لتحديث حالة التحميل في المكون الأب.\r\n * @param {function} setError - دالة لتحديث رسائل الخطأ في المكون الأب.\r\n * @param {function} setMessage - دالة لتحديث رسائل النجاح في المكون الأب.\r\n */\r\nexport const importStudentsFromCSV = async (\r\n    csvFile,\r\n    db,\r\n    validateStudentData, // دالة التحقق من صحة البيانات\r\n    setLoading,\r\n    setError,\r\n    setMessage\r\n) => {\r\n    // التحقق مما إذا كان الملف موجودًا\r\n    if (!csvFile) {\r\n        setError(\"الرجاء تحديد ملف CSV أولاً.\");\r\n        return;\r\n    }\r\n\r\n    setLoading(true); // بدء التحميل\r\n    setError(\"\");      // مسح الأخطاء السابقة\r\n    setMessage(\"\");    // مسح الرسائل السابقة\r\n\r\n    const reader = new FileReader(); // إنشاء كائن FileReader لقراءة الملف\r\n\r\n    // معالج حدث عند اكتمال قراءة الملف\r\n    reader.onload = async (event) => {\r\n        try {\r\n            const csvData = event.target.result; // الحصول على محتوى الملف كـ string\r\n            // تقسيم المحتوى إلى أسطر، وتصفية الأسطر الفارغة\r\n            const lines = csvData.split(/\\r\\n|\\n/).filter(line => line.trim() !== '');\r\n\r\n            // التحقق من أن الملف يحتوي على بيانات كافية (على الأقل سطرين: عناوين ورأس)\r\n            if (lines.length < 2) {\r\n                throw new Error(\"الملف فارغ أو يحتوي على العناوين فقط.\");\r\n            }\r\n\r\n            // تحليل العناوين من السطر الأول\r\n            const headers = lines[0].split(\",\").map(h => h.trim());\r\n            // العناوين المطلوبة لضمان صحة البيانات\r\n            const requiredHeaders = [\"name\", \"halaqaId\", \"gender\", \"birthDate\", \"contactNumber\", \"memorization\", \"notes\"];\r\n            // التحقق من وجود جميع العناوين المطلوبة\r\n            const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\r\n\r\n            if (missingHeaders.length > 0) {\r\n                throw new Error(`ملف CSV يجب أن يحتوي على الأعمدة التالية على الأقل: ${requiredHeaders.join(', ')}`);\r\n            }\r\n\r\n            const batch = writeBatch(db); // بدء عملية كتابة دفعة (batch write) لزيادة الكفاءة\r\n            const studentsCollectionRef = collection(db, \"students\"); // مرجع لمجموعة الطلاب\r\n\r\n            // معالجة كل سطر من البيانات (بدءًا من السطر الثاني، بعد العناوين)\r\n            for (let i = 1; i < lines.length; i++) {\r\n                const data = lines[i].split(\",\"); // تقسيم السطر إلى بيانات بناءً على الفاصلة\r\n                // إنشاء كائن studentData من العناوين والبيانات\r\n                const studentData = headers.reduce((obj, header, index) => ({ ...obj, [header]: data[index] ? data[index].trim() : \"\" }), {});\r\n\r\n                // تعيين قيمة افتراضية للجنس إذا لم تكن موجودة\r\n                if (!studentData.gender) studentData.gender = \"ذكر\";\r\n\r\n                // التحقق من صحة بيانات الطالب باستخدام الدالة الممررة\r\n                const validationError = validateStudentData(studentData);\r\n                if (validationError) {\r\n                    throw new Error(`خطأ في بيانات الصف ${i + 1}: ${validationError}`);\r\n                }\r\n\r\n                // إضافة عملية تعيين (set) لكل وثيقة طالب إلى الدفعة\r\n                // يتم إنشاء معرف جديد للوثيقة تلقائيًا\r\n                batch.set(doc(studentsCollectionRef), studentData);\r\n            }\r\n\r\n            await batch.commit(); // تنفيذ جميع عمليات الكتابة في الدفعة\r\n            setMessage(`تم استيراد ${lines.length - 1} طالب بنجاح! سيتم تحديث القائمة تلقائياً.`);\r\n        } catch (err) {\r\n            console.error(\"Error importing CSV:\", err);\r\n            // عرض رسالة خطأ مفصلة للمستخدم\r\n            setError(`فشل في استيراد الملف: ${err.message}. تأكد من أن ترتيب الأعمدة هو: name,halaqaId,gender,birthDate,contactNumber,memorization,notes`);\r\n        } finally {\r\n            setLoading(false); // إنهاء التحميل في كل الأحوال\r\n        }\r\n    };\r\n\r\n    // معالج حدث عند حدوث خطأ في قراءة الملف\r\n    reader.onerror = () => {\r\n        setLoading(false);\r\n        setError(\"فشل في قراءة الملف.\");\r\n    };\r\n\r\n    // قراءة الملف كـ نص\r\n    reader.readAsText(csvFile);\r\n};\r\n","import React, { useEffect, useState, useCallback, useMemo } from \"react\";\r\nimport { db } from \"../firebaseConfig\";\r\nimport { collection, query, where, getDocs, addDoc, updateDoc, deleteDoc, doc, onSnapshot, writeBatch, orderBy } from \"firebase/firestore\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport CustomModal from './CustomModal';\r\nimport { exportToPdf } from '../utils/pdfExporter';\r\nimport { importStudentsFromCSV } from '../utils/csvImporter';\r\nimport '../Styles/StudentManagementStyles.css';\r\n\r\n\r\nexport default function StudentManagement() {\r\n    const { currentUser, userRole } = useAuth();\r\n\r\n    const [editingStudent, setEditingStudent] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const [modalConfig, setModalConfig] = useState({});\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [filterHalaqaId, setFilterHalaqaId] = useState('');\r\n\r\n    const [csvFile, setCsvFile] = useState(null); // حالة ملف CSV للاستيراد\r\n\r\n    const [halaqat, setHalaqat] = useState([]);\r\n    const [allStudents, setAllStudents] = useState([]);\r\n\r\n    const initialNewStudentState = useMemo(() => ({\r\n        name: '',\r\n        halaqaId: '',\r\n        gender: 'ذكر',\r\n        birthDate: '',\r\n        contactNumber: '',\r\n        memorization: '',\r\n        notes: ''\r\n    }), []);\r\n    const [newStudent, setNewStudent] = useState(initialNewStudentState);\r\n\r\n    useEffect(() => {\r\n        if (!currentUser || !currentUser.uid || (userRole !== \"admin\" && userRole !== \"teacher\")) {\r\n\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        setError(\"\");\r\n        let unsubscribeHalaqat = () => { };\r\n        let unsubscribeStudents = () => { };\r\n\r\n        const setupStudentsListener = (currentHalaqatList, currentHalaqaNamesMap) => {\r\n            let studentsQueryRef = collection(db, \"students\");\r\n            if (userRole === \"teacher\") {\r\n                const teacherHalaqaIds = currentHalaqatList.map(h => h.id);\r\n                if (teacherHalaqaIds.length === 0) {\r\n                    setAllStudents([]);\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n                if (teacherHalaqaIds.length > 10) {\r\n                    setError(\"عدد الحلقات المرتبطة بالمعلم كبير جدًا. يرجى الاتصال بالدعم.\");\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n                studentsQueryRef = query(studentsQueryRef, where(\"halaqaId\", \"in\", teacherHalaqaIds), orderBy(\"name\"));\r\n            } else {\r\n                // For admin, order all students by name\r\n                studentsQueryRef = query(studentsQueryRef, orderBy(\"name\"));\r\n            }\r\n\r\n            if (unsubscribeStudents) unsubscribeStudents();\r\n            unsubscribeStudents = onSnapshot(studentsQueryRef, (studentsSnapshot) => {\r\n                const studentsList = studentsSnapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    ...doc.data(),\r\n                    halaqaName: currentHalaqaNamesMap[doc.data().halaqaId] || \"غير معروفة\"\r\n                }));\r\n                setAllStudents(studentsList);\r\n                setLoading(false);\r\n            }, (err) => {\r\n                setError(\"فشل في جلب بيانات الطلاب: \" + err.message);\r\n                setLoading(false);\r\n            });\r\n        };\r\n\r\n        const setupHalaqatListener = () => {\r\n            let halaqatQueryRef = collection(db, \"halaqat\");\r\n            if (userRole === \"teacher\") {\r\n                halaqatQueryRef = query(halaqatQueryRef, where(\"teacherId\", \"==\", currentUser.uid));\r\n            }\r\n            unsubscribeHalaqat = onSnapshot(halaqatQueryRef, (halaqatSnapshot) => {\r\n                const halaqatList = halaqatSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n                setHalaqat(halaqatList);\r\n                const halaqaNamesMap = {};\r\n                halaqatList.forEach(h => halaqaNamesMap[h.id] = h.name);\r\n                setupStudentsListener(halaqatList, halaqaNamesMap);\r\n            }, (err) => {\r\n                setError(\"فشل في جلب بيانات الحلقات: \" + err.message);\r\n                setLoading(false);\r\n            });\r\n        };\r\n\r\n        setupHalaqatListener();\r\n\r\n        return () => {\r\n            unsubscribeHalaqat();\r\n            unsubscribeStudents();\r\n        };\r\n    }, [currentUser, userRole]);\r\n\r\n\r\n    const validateStudentData = useCallback((studentData) => {\r\n        if (!studentData.name || !studentData.name.trim()) return \"اسم الطالب مطلوب.\";\r\n        if (!studentData.halaqaId) return \"الحلقة مطلوبة.\";\r\n        if (studentData.contactNumber && !/^\\d{7,15}$/.test(studentData.contactNumber)) return \"رقم الاتصال غير صالح (7-15 رقمًا).\";\r\n        return null;\r\n    }, []);\r\n\r\n    const handleAddStudent = useCallback(async () => {\r\n        const validationError = validateStudentData(newStudent);\r\n        if (validationError) {\r\n            setError(validationError);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const dataToAdd = { ...newStudent, teacherId: userRole === \"teacher\" ? currentUser.uid : null };\r\n            await addDoc(collection(db, \"students\"), dataToAdd);\r\n            setMessage(\"تم إضافة الطالب بنجاح!\");\r\n            setNewStudent(initialNewStudentState);\r\n        } catch (err) {\r\n            setError(\"فشل في إضافة الطالب: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [newStudent, userRole, currentUser, validateStudentData, initialNewStudentState]);\r\n\r\n    const handleEditClick = useCallback((student) => {\r\n        setEditingStudent({ ...student });\r\n\r\n        setError(\"\");\r\n        setMessage(\"\");\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }, []);\r\n\r\n    const handleUpdateStudent = useCallback(async () => {\r\n        if (!editingStudent) return;\r\n        const validationError = validateStudentData(editingStudent);\r\n        if (validationError) {\r\n            setError(validationError);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const { id, halaqaName, ...dataToUpdate } = editingStudent;\r\n            await updateDoc(doc(db, \"students\", id), dataToUpdate);\r\n            setMessage(\"تم تحديث الطالب بنجاح!\");\r\n            setEditingStudent(null);\r\n        } catch (err) {\r\n            setError(\"فشل في تحديث الطالب: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [editingStudent, validateStudentData]);\r\n\r\n    const handleDeleteStudent = useCallback((id) => {\r\n        setModalConfig({\r\n            title: \"تأكيد الحذف\",\r\n            message: \"هل أنت متأكد؟ سيتم حذف جميع تقارير الطالب أيضًا. (يفضل نقل هذه العملية للخادم)\",\r\n            onConfirm: async () => {\r\n                setShowModal(false);\r\n                setLoading(true);\r\n                try {\r\n                    const reportsQuery = query(collection(db, \"weeklyReports\"), where(\"studentId\", \"==\", id));\r\n                    const reportsSnapshot = await getDocs(reportsQuery);\r\n                    const deleteReportPromises = reportsSnapshot.docs.map(reportDoc => deleteDoc(reportDoc.ref));\r\n                    await Promise.all(deleteReportPromises);\r\n                    await deleteDoc(doc(db, \"students\", id));\r\n                    setMessage(\"تم حذف الطالب وتقاريره بنجاح!\");\r\n                } catch (err) {\r\n                    setError(\"فشل في حذف الطالب: \" + err.message);\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            },\r\n            onCancel: () => setShowModal(false),\r\n            showCancelButton: true,\r\n        });\r\n        setShowModal(true);\r\n    }, []);\r\n\r\n    const handleCsvFileChange = (event) => {\r\n        setCsvFile(event.target.files[0]);\r\n    };\r\n\r\n    const handleImportStudents = useCallback(async () => {\r\n        await importStudentsFromCSV(csvFile, db, validateStudentData, setLoading, setError, setMessage);\r\n        if (document.getElementById('csv-file-input')) {\r\n            document.getElementById('csv-file-input').value = null;\r\n        }\r\n        setCsvFile(null);\r\n    }, [csvFile, db, validateStudentData]);\r\n\r\n    // منطق التصفية والبحث\r\n    const filteredStudents = useMemo(() => {\r\n        return allStudents.filter(student => {\r\n            const matchesHalaqa = filterHalaqaId ? student.halaqaId === filterHalaqaId : true;\r\n            const matchesSearch = searchTerm ? student.name.toLowerCase().includes(searchTerm.toLowerCase()) : true;\r\n            return matchesHalaqa && matchesSearch;\r\n        });\r\n    }, [allStudents, searchTerm, filterHalaqaId]);\r\n\r\n    const exportFilteredPdf = useCallback(() => {\r\n        const title = \"تقرير بيانات الطلاب\";\r\n\r\n        const columns = [\"الاسم\", \"الحلقة\", \"الجنس\", \"تاريخ الميلاد\", \"رقم الاتصال\", \"الحفظ الحالي\", \"ملاحظات\"];\r\n        const rows = filteredStudents.map(s => [s.name, s.halaqaName, s.gender, s.birthDate || \"-\", s.contactNumber || \"-\", s.memorization || \"-\", s.notes || \"-\"]);\r\n        const fileName = \"تقرير_الطلاب\";\r\n\r\n        exportToPdf(title, columns, rows, fileName);\r\n    }, [filteredStudents]);\r\n\r\n    if (userRole !== \"admin\" && userRole !== \"teacher\") {\r\n        return <div className=\"unauthorized-message\">ليس لديك الصلاحية للوصول إلى هذه الصفحة.</div>;\r\n    }\r\n\r\n    if (loading && allStudents.length === 0) {\r\n        return <p className=\"loading-message\">جاري تحميل بيانات الطلاب...</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"student-management-container page-container\">\r\n            <h2 className=\"student-management-title\">إدارة الطلاب</h2>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {message && <p className=\"success-message\">{message}</p>}\r\n\r\n            {/* === نموذج التعديل (يظهر فقط عند اختيار طالب) === */}\r\n            {editingStudent && (\r\n                <div className=\"student-form-section card\">\r\n                    <h3>تعديل بيانات الطالب: {editingStudent.name}</h3>\r\n                    <div className=\"form-grid\">\r\n                        <div className=\"form-group\">\r\n                            <label>اسم الطالب:</label>\r\n                            <input type=\"text\" value={editingStudent.name} onChange={(e) => setEditingStudent(s => ({ ...s, name: e.target.value }))} className=\"form-input\" required />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>الحلقة:</label>\r\n                            <select value={editingStudent.halaqaId} onChange={(e) => setEditingStudent(s => ({ ...s, halaqaId: e.target.value }))} className=\"form-select\" required>\r\n                                <option value=\"\">اختر الحلقة</option>\r\n                                {halaqat.map((h) => (<option key={h.id} value={h.id}>{h.name}</option>))}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>الجنس:</label>\r\n                            <select value={editingStudent.gender} onChange={(e) => setEditingStudent(s => ({ ...s, gender: e.target.value }))} className=\"form-select\" required>\r\n                                <option value=\"ذكر\">ذكر</option>\r\n                                <option value=\"أنثى\">أنثى</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>تاريخ الميلاد:</label>\r\n                            <input type=\"date\" value={editingStudent.birthDate || ''} onChange={(e) => setEditingStudent(s => ({ ...s, birthDate: e.target.value }))} className=\"form-input\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>رقم الاتصال:</label>\r\n                            <input type=\"text\" value={editingStudent.contactNumber || ''} onChange={(e) => setEditingStudent(s => ({ ...s, contactNumber: e.target.value }))} className=\"form-input\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>الحفظ الحالي:</label>\r\n                            <input type=\"text\" value={editingStudent.memorization || ''} onChange={(e) => setEditingStudent(s => ({ ...s, memorization: e.target.value }))} className=\"form-input\" />\r\n                        </div>\r\n                        <div className=\"form-group full-width\">\r\n                            <label>ملاحظات:</label>\r\n                            <textarea value={editingStudent.notes || ''} onChange={(e) => setEditingStudent(s => ({ ...s, notes: e.target.value }))} className=\"form-textarea\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-actions\">\r\n                        <button onClick={handleUpdateStudent} className=\"submit-button\" disabled={loading}>\r\n                            {loading ? \"جاري التحديث...\" : \"تحديث الطالب\"}\r\n                        </button>\r\n                        <button type=\"button\" onClick={() => setEditingStudent(null)} className=\"cancel-button\" disabled={loading}>\r\n                            إلغاء التعديل\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* === نموذج الإضافة (يظهر فقط في حال عدم وجود تعديل) === */}\r\n            {!editingStudent && (\r\n                <div className=\"student-form-section card\">\r\n                    <h3>إضافة طالب جديد</h3>\r\n                    <div className=\"form-grid\">\r\n                        <div className=\"form-group\">\r\n                            <label>اسم الطالب:</label>\r\n                            <input type=\"text\" value={newStudent.name} onChange={(e) => setNewStudent(s => ({ ...s, name: e.target.value }))} className=\"form-input\" required />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>الحلقة:</label>\r\n                            <select value={newStudent.halaqaId} onChange={(e) => setNewStudent(s => ({ ...s, halaqaId: e.target.value }))} className=\"form-select\" required>\r\n                                <option value=\"\">اختر الحلقة</option>\r\n                                {halaqat.map((h) => (<option key={h.id} value={h.id}>{h.name}</option>))}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>الجنس:</label>\r\n                            <select value={newStudent.gender} onChange={(e) => setNewStudent(s => ({ ...s, gender: e.target.value }))} className=\"form-select\">\r\n                                <option value=\"ذكر\">ذكر</option>\r\n                                <option value=\"أنثى\">أنثى</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>تاريخ الميلاد:</label>\r\n                            <input type=\"date\" value={newStudent.birthDate} onChange={(e) => setNewStudent(s => ({ ...s, birthDate: e.target.value }))} className=\"form-input\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>رقم الاتصال:</label>\r\n                            <input type=\"text\" value={newStudent.contactNumber} onChange={(e) => setNewStudent(s => ({ ...s, contactNumber: e.target.value }))} className=\"form-input\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>الحفظ الحالي:</label>\r\n                            <input type=\"text\" value={newStudent.memorization} onChange={(e) => setNewStudent(s => ({ ...s, memorization: e.target.value }))} className=\"form-input\" />\r\n                        </div>\r\n                        <div className=\"form-group full-width\">\r\n                            <label>ملاحظات:</label>\r\n                            <textarea value={newStudent.notes} onChange={(e) => setNewStudent(s => ({ ...s, notes: e.target.value }))} className=\"form-textarea\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-actions\">\r\n                        <button onClick={handleAddStudent} className=\"submit-button\" disabled={loading}>\r\n                            {loading ? \"جاري الإضافة...\" : \"إضافة طالب\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* === قسم قائمة الطلاب والتحكم === */}\r\n            <div className=\"students-list-section card\">\r\n                <h3>الطلاب المسجلون ({filteredStudents.length})</h3>\r\n                <div className=\"table-controls\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"ابحث بالاسم...\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                        className=\"search-input\"\r\n                    />\r\n                    <select value={filterHalaqaId} onChange={(e) => setFilterHalaqaId(e.target.value)} className=\"filter-select\">\r\n                        <option value=\"\">كل الحلقات</option>\r\n                        {halaqat.map((h) => (<option key={h.id} value={h.id}>{h.name}</option>))}\r\n                    </select>\r\n                    <button onClick={exportFilteredPdf} className=\"export-pdf-button\" disabled={filteredStudents.length === 0}>\r\n                        تصدير القائمة الحالية (PDF)\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"import-section\">\r\n                    <h4>استيراد من ملف CSV</h4>\r\n                    <input type=\"file\" id=\"csv-file-input\" accept=\".csv\" onChange={handleCsvFileChange} />\r\n                    <button onClick={handleImportStudents} disabled={!csvFile || loading} className=\"import-button\">\r\n                        {loading ? 'جاري الاستيراد...' : 'استيراد الطلاب'}\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"students-table-container\">\r\n                    {filteredStudents.length > 0 ? (\r\n                        <table className=\"students-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>الاسم</th>\r\n                                    <th>الحلقة</th>\r\n                                    <th>الجنس</th>\r\n                                    <th>تاريخ الميلاد</th>\r\n                                    <th>رقم الاتصال</th>\r\n                                    <th>الحفظ الحالي</th>\r\n                                    <th>ملاحظات</th>\r\n                                    <th>الإجراءات</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {filteredStudents.map((student) => (\r\n                                    <tr key={student.id}>\r\n                                        <td>{student.name}</td>\r\n                                        <td>{student.halaqaName}</td>\r\n                                        <td>{student.gender}</td>\r\n                                        <td>{student.birthDate || '-'}</td>\r\n                                        <td>{student.contactNumber || '-'}</td>\r\n                                        <td>{student.memorization || '-'}</td>\r\n                                        <td>{student.notes || '-'}</td>\r\n                                        <td className=\"actions-cell\">\r\n                                            <button onClick={() => handleEditClick(student)} className=\"edit-button\">تعديل</button>\r\n                                            <button onClick={() => handleDeleteStudent(student.id)} className=\"delete-button\">حذف</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    ) : (\r\n                        <p className=\"no-data-message\">\r\n                            {searchTerm || filterHalaqaId ? \"لا توجد نتائج تطابق بحثك.\" : \"لا يوجد طلاب مسجلون حاليًا.\"}\r\n                        </p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <CustomModal\r\n                isOpen={showModal}\r\n                title={modalConfig.title}\r\n                message={modalConfig.message}\r\n                onConfirm={modalConfig.onConfirm}\r\n                onCancel={modalConfig.onCancel}\r\n                showCancelButton={modalConfig.showCancelButton}\r\n            />\r\n        </div>\r\n    );\r\n}"],"names":["_ref","isOpen","title","message","children","onConfirm","onCancel","showCancelButton","closeOnOverlayClick","modalRef","useRef","useEffect","_modalRef$current","current","focus","handleEscape","event","key","document","addEventListener","removeEventListener","_jsx","className","onClick","e","contains","target","_jsxs","ref","role","tabIndex","id","importStudentsFromCSV","async","csvFile","db","validateStudentData","setLoading","setError","setMessage","reader","FileReader","onload","lines","result","split","filter","line","trim","length","Error","headers","map","h","requiredHeaders","includes","join","batch","writeBatch","studentsCollectionRef","collection","i","data","studentData","reduce","obj","header","index","gender","validationError","set","doc","commit","err","console","error","onerror","readAsText","StudentManagement","currentUser","userRole","useAuth","editingStudent","setEditingStudent","useState","loading","showModal","setShowModal","modalConfig","setModalConfig","searchTerm","setSearchTerm","filterHalaqaId","setFilterHalaqaId","setCsvFile","halaqat","setHalaqat","allStudents","setAllStudents","initialNewStudentState","useMemo","name","halaqaId","birthDate","contactNumber","memorization","notes","newStudent","setNewStudent","uid","unsubscribeHalaqat","unsubscribeStudents","setupHalaqatListener","halaqatQueryRef","query","where","onSnapshot","halaqatSnapshot","halaqatList","docs","halaqaNamesMap","forEach","setupStudentsListener","currentHalaqatList","currentHalaqaNamesMap","studentsQueryRef","teacherHalaqaIds","orderBy","studentsSnapshot","studentsList","halaqaName","useCallback","test","handleAddStudent","dataToAdd","teacherId","addDoc","handleEditClick","student","window","scrollTo","top","behavior","handleUpdateStudent","dataToUpdate","updateDoc","handleDeleteStudent","reportsQuery","deleteReportPromises","getDocs","reportDoc","deleteDoc","Promise","all","handleImportStudents","getElementById","value","filteredStudents","matchesHalaqa","matchesSearch","toLowerCase","exportFilteredPdf","rows","s","exportToPdf","type","onChange","required","disabled","placeholder","accept","files","CustomModal"],"sourceRoot":""}