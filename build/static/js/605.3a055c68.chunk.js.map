{"version":3,"file":"static/js/605.3a055c68.chunk.js","mappings":"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","sources":["components/AdvertisementsPage.js"],"sourcesContent":["// src/pages/AdvertisementsPage.js\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { db } from '../firebaseConfig';\r\nimport { collection, query, orderBy, limit, startAfter, getDocs } from 'firebase/firestore';\r\nimport '../Styles/AdvertisementsPageStyles.css'; // استيراد ملف التنسيقات الخاص بالصفحة\r\n\r\nexport default function AdvertisementsPage() {\r\n    // حالة لتخزين الإعلانات\r\n    const [advertisements, setAdvertisements] = useState([]);\r\n    // حالة التحميل\r\n    const [loading, setLoading] = useState(true);\r\n    // حالة الخطأ\r\n    const [error, setError] = useState('');\r\n    // لتتبع آخر مستند تم عرضه لخاصية \"المزيد\" (pagination)\r\n    const [lastVisible, setLastVisible] = useState(null);\r\n    // لتحديد ما إذا كانت هناك المزيد من الإعلانات لجلبها\r\n    const [hasMore, setHasMore] = useState(true);\r\n\r\n    // عدد الإعلانات التي يتم جلبها في كل مرة عند النقر على \"المزيد\"\r\n    const FETCH_LIMIT = 3;\r\n\r\n    /**\r\n     * دالة لجلب الإعلانات من Firestore.\r\n     * @param {boolean} initialLoad - لتحديد ما إذا كان هذا هو التحميل الأولي للصفحة.\r\n     */\r\n    const fetchAdvertisements = useCallback(async (initialLoad = true) => {\r\n        setLoading(true);\r\n        setError('');\r\n\r\n        try {\r\n            let q;\r\n            if (initialLoad) {\r\n                // الاستعلام الأولي: يجلب أول FETCH_LIMIT من الإعلانات\r\n                q = query(\r\n                    collection(db, \"advertisements\"),\r\n                    orderBy(\"date\", \"desc\"), // ترتيب حسب التاريخ تنازلياً (الأحدث أولاً)\r\n                    limit(FETCH_LIMIT)\r\n                );\r\n            } else {\r\n                // الاستعلام لـ \"المزيد\": يجلب FETCH_LIMIT إعلانًا بعد آخر إعلان مرئي\r\n                q = query(\r\n                    collection(db, \"advertisements\"),\r\n                    orderBy(\"date\", \"desc\"),\r\n                    startAfter(lastVisible), // يبدأ من بعد آخر مستند تم جلبه\r\n                    limit(FETCH_LIMIT)\r\n                );\r\n            }\r\n\r\n            const documentSnapshots = await getDocs(q);\r\n            const newAdvertisements = documentSnapshots.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data()\r\n            }));\r\n\r\n            // تحديث حالة lastVisible لآخر مستند تم جلبه، لاستخدامه في التحميل التالي\r\n            setLastVisible(documentSnapshots.docs[documentSnapshots.docs.length - 1]);\r\n\r\n            // التحقق مما إذا كانت هناك المزيد من الإعلانات: إذا كان عدد الإعلانات التي تم جلبها أقل من FETCH_LIMIT، فهذا يعني أنه لا توجد المزيد.\r\n            setHasMore(newAdvertisements.length === FETCH_LIMIT);\r\n\r\n            if (initialLoad) {\r\n                setAdvertisements(newAdvertisements);\r\n            } else {\r\n                // إضافة الإعلانات الجديدة إلى القائمة الموجودة\r\n                setAdvertisements(prevAds => [...prevAds, ...newAdvertisements]);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching advertisements:\", err);\r\n            setError(\"فشل في جلب الإعلانات: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [lastVisible]); // تعتمد على lastVisible لإعادة الجلب عند تغييرها\r\n\r\n    // جلب الإعلانات عند تحميل المكون لأول مرة\r\n    useEffect(() => {\r\n        fetchAdvertisements(true);\r\n    }, [fetchAdvertisements]); // تعتمد على fetchAdvertisements لضمان تشغيلها مرة واحدة\r\n\r\n    /**\r\n     * دالة لمعالجة النقر على زر \"المزيد\".\r\n     */\r\n    const handleLoadMore = () => {\r\n        fetchAdvertisements(false);\r\n    };\r\n\r\n    // عرض رسائل التحميل والخطأ\r\n    if (loading && advertisements.length === 0) return <p className=\"loading-message\">جاري تحميل الإعلانات...</p>;\r\n    if (error) return <p className=\"error-message\">{error}</p>;\r\n\r\n    return (\r\n        <div className=\"advertisements-page-container page-container\">\r\n            <h2 className=\"page-title\">الإعلانات</h2>\r\n            {advertisements.length > 0 ? (\r\n                <div className=\"advertisements-grid\">\r\n                    {advertisements.map(ad => (\r\n                        <div key={ad.id} className=\"advertisement-card\">\r\n                            {/* عرض الصورة إذا كانت موجودة، وإلا عرض مكانًا بديلاً */}\r\n                            {ad.imageUrl ? (\r\n                                <img\r\n                                    src={ad.imageUrl}\r\n                                    alt={ad.title}\r\n                                    className=\"advertisement-image\"\r\n                                    onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/400x200/F0F0F0/333333?text=No+Image\"; }}\r\n                                />\r\n                            ) : (\r\n                                <div className=\"advertisement-image-placeholder\">\r\n                                    <span className=\"placeholder-text\">لا توجد صورة</span>\r\n                                </div>\r\n                            )}\r\n                            <h3 className=\"advertisement-title\">{ad.title}</h3>\r\n                            <p className=\"advertisement-description\">{ad.description}</p>\r\n                            {/* تنسيق وعرض التاريخ */}\r\n                            {ad.date && ad.date.seconds && <p className=\"advertisement-date\">التاريخ: {new Date(ad.date.seconds * 1000).toLocaleDateString('ar-EG')}</p>}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <p className=\"no-advertisements-message\">لا توجد إعلانات لعرضها حاليًا.</p>\r\n            )}\r\n\r\n            {/* زر \"المزيد\" يظهر فقط إذا كان هناك المزيد من الإعلانات ولم نكن في حالة تحميل */}\r\n            {hasMore && (\r\n                <button onClick={handleLoadMore} className=\"load-more-button\" disabled={loading}>\r\n                    {loading ? \"جاري التحميل...\" : \"المزيد من الإعلانات\"}\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["AdvertisementsPage","advertisements","setAdvertisements","useState","loading","setLoading","error","setError","lastVisible","setLastVisible","hasMore","setHasMore","fetchAdvertisements","useCallback","async","initialLoad","arguments","length","undefined","q","query","collection","db","orderBy","limit","startAfter","documentSnapshots","getDocs","newAdvertisements","docs","map","doc","id","data","prevAds","err","console","message","useEffect","_jsx","className","children","_jsxs","ad","imageUrl","src","alt","title","onError","e","target","onerror","description","date","seconds","Date","toLocaleDateString","onClick","handleLoadMore","disabled"],"sourceRoot":""}