{"version":3,"file":"static/js/985.d03550e2.chunk.js","mappings":"sOAYe,SAASA,IACpB,MAAM,SAAEC,EAAQ,YAAEC,IAAgBC,EAAAA,EAAAA,MAC3BC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,CAC/BC,cAAe,EACfC,aAAc,EACdC,cAAe,EACfC,oBAAqB,CAAC,EACtBC,oBAAqB,EACrBC,gBAAiB,EACjBC,kBAAmB,EACnBC,eAAgB,CAAC,KAEdC,EAASC,IAAcV,EAAAA,EAAAA,WAAS,IAChCW,EAAOC,IAAYZ,EAAAA,EAAAA,UAAS,KAG5Ba,EAAmBC,IAAwBd,EAAAA,EAAAA,UAAS,OACpDe,EAA0BC,IAA+BhB,EAAAA,EAAAA,UAAS,OAClEiB,EAA4BC,IAAiClB,EAAAA,EAAAA,UAAS,CAAC,IACvEmB,EAA2BC,IAAgCpB,EAAAA,EAAAA,UAAS,OACpEqB,EAA6BC,IAAkCtB,EAAAA,EAAAA,UAAS,CAAC,GAgF1EuB,GAAaC,EAAAA,EAAAA,aAAYC,UAC3Bf,GAAW,GACXE,EAAS,IACT,IACI,IAAIc,GAAmBC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,YAElCC,IADkBF,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,YACTD,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,kBACvCE,GAAgBH,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,SAGnC,MAAMG,QAA2BC,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,YAClDpB,EAAiB,CAAC,EACxBuB,EAAmBE,QAAQC,IACvB1B,EAAe0B,EAAIC,IAAMD,EAAIE,OAAOC,OAIxC,MAAMC,QAA4BN,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,aACnDW,EAAc,CAAC,EACrBD,EAAoBL,QAAQC,IACxBK,EAAYL,EAAIC,IAAMD,EAAIE,OAAOC,OAGrC,MAAMG,QAA4BR,EAAAA,EAAAA,KAAQL,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,UACnDa,EAAc,CAAC,EAOrB,GANAD,EAAoBE,KAAKC,OAAOT,GAA2B,YAApBA,EAAIE,OAAOQ,MAAoBX,QAAQC,IAC1EO,EAAYP,EAAIC,IAAMD,EAAIE,OAAOC,MAAQH,EAAIE,OAAOS,QAKvC,YAAblD,GAA0BC,EAAa,CAEvC,MAAMkD,QAA+Bd,EAAAA,EAAAA,KAAQe,EAAAA,EAAAA,IAAMpB,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,YAAYoB,EAAAA,EAAAA,IAAM,YAAa,KAAMpD,EAAYqD,OAC7GC,EAAmBJ,EAAuBJ,KAAKS,IAAIjB,GAAOA,EAAIC,IAEpE,GAAgC,IAA5Be,EAAiBE,OAkBjB,OAhBArD,EAAS,CACLE,cAAe,EACfC,aAAc,EACdC,cAAe,EACfC,oBAAqB,CAAC,EACtBC,oBAAqB,EACrBC,gBAAiB,EACjBC,kBAAmB,EACnBC,eAAgB,CAAC,IAErBM,EAAqB,MACrBE,EAA4B,MAC5BE,EAA8B,CAAC,GAC/BE,EAA6B,MAC7BE,EAA+B,CAAC,QAChCZ,GAAW,GAKfgB,GAAmBqB,EAAAA,EAAAA,GAAMrB,GAAkBsB,EAAAA,EAAAA,IAAM,WAAY,KAAME,IAEnErB,GAAwBkB,EAAAA,EAAAA,GAAMlB,GAAuBmB,EAAAA,EAAAA,IAAM,WAAY,KAAME,IAG7E,MAAMG,EAAyB,CAAC,EAChCP,EAAuBb,QAAQC,IAC3BmB,EAAuBnB,EAAIC,IAAMD,EAAIE,OAAOC,OAEhDtC,EAASuD,IAAI,IAAUA,EAAM9C,eAAgB6C,IAEjD,MAEItD,EAASuD,IAAI,IAAUA,EAAM9C,eAAgBA,KAIjD,MACI+C,EACAC,EACAC,SACMC,QAAQC,IAAI,EAClB3B,EAAAA,EAAAA,IAAQN,IACRM,EAAAA,EAAAA,IAAQH,IACRG,EAAAA,EAAAA,IAAQF,KAGN7B,EAAgBsD,EAAiBK,KACjC1D,EAA4B,YAAbP,EAAyB4D,EAAiBb,KAAKmB,OAAO,CAACC,EAAK5B,KAC7E,MAAM6B,EAAW7B,EAAIE,OAAO2B,SAI5B,OAHIA,IAAaD,EAAIE,SAASD,IAC1BD,EAAIG,KAAKF,GAEND,GACR,IAAIV,OAASrB,EAAmB6B,KAE7BzD,EAAgBsD,EAAyBf,KAAKC,OAAOT,GAA2B,YAApBA,EAAIE,OAAOQ,MAAoBQ,OAG3FhD,EAzKuB8D,EAACX,EAAkB/C,KACpD,MAAM2D,EAAe,CAAC,EAStB,OARAZ,EAAiBtB,QAAQC,IACrB,MACM6B,EADc7B,EAAIE,OACK2B,SAC7B,GAAIA,GAAYvD,EAAeuD,GAAW,CACtC,MAAMK,EAAa5D,EAAeuD,GAClCI,EAAaC,IAAeD,EAAaC,IAAe,GAAK,CACjE,IAEGD,GA+JyBD,CAA6BX,EAAkB/C,IAGrE,oBAAEH,EAAmB,gBAAEC,EAAe,kBAAEC,GA1JjBiD,KACjC,IAAIa,EAAoB,EACpBC,EAAgB,EAChBC,EAAkB,EAClBC,EAAc,EAElBhB,EAAsBvB,QAAQC,IAC1B,MAAMuC,EAAavC,EAAIE,OACvBiC,GAAqBI,EAAWC,gBAAkB,EAClDJ,GAAiBG,EAAWE,cAAgB,EAC5CJ,GAAmBE,EAAWG,gBAAkB,EAChDJ,MAGJ,MAAMnE,EAAsBmE,EAAc,GAAKH,EAAoBG,GAAaK,QAAQ,GAAK,EACvFvE,EAAkBkE,EAAc,GAAKF,EAAgBE,GAAaK,QAAQ,GAAK,EAC/EtE,EAAoBiE,EAAc,GAAKD,EAAkBC,GAAaK,QAAQ,GAAK,EAEzF,MAAO,CACHxE,oBAAqByE,WAAWzE,GAChCC,gBAAiBwE,WAAWxE,GAC5BC,kBAAmBuE,WAAWvE,KAqIsCwE,CAA4BvB,GAK1FwB,EAAM,IAAIC,KACVC,EAlIUC,KACpB,MAAMC,EAAI,IAAIH,KAAKE,GACbE,EAAMD,EAAEE,SACRC,EAAOH,EAAEI,UAAYH,EAG3B,OAFAD,EAAEK,QAAQF,GACVH,EAAEM,SAAS,EAAG,EAAG,EAAG,GACbN,GA4HwBO,CAAeX,GACpCY,EArHWT,KACrB,MAAMC,EAAI,IAAIH,KAAKE,GAGnB,OAFAC,EAAEK,QAAQ,GACVL,EAAEM,SAAS,EAAG,EAAG,EAAG,GACbN,GAiHyBS,CAAgBb,GAEtCc,EAAsB,CAAC,EACvBC,EAAuB,CAAC,EACxBC,EAAsB,CAAC,EAE7BxC,EAAsBvB,QAAQC,IAC1B,MAAM+D,EAAS/D,EAAIE,OACb8D,EAAa,IAAIjB,KAAKgB,EAAOC,YAG7BC,EAASrB,WAAWmB,EAAOE,SAAW,EAGxCD,GAAchB,GAAsBgB,GAAclB,KAC7Cc,EAAoBG,EAAOG,YAAcD,EAASL,EAAoBG,EAAOG,WAAWC,SACzFP,EAAoBG,EAAOG,WAAa,CAAEC,MAAOF,EAAQpC,SAAUkC,EAAOlC,WAK9EmC,GAAcN,GAAuBM,GAAclB,MAE9Ce,EAAqBE,EAAOG,YAAcD,EAASJ,EAAqBE,EAAOG,WAAWC,SAC3FN,EAAqBE,EAAOG,WAAa,CAAEC,MAAOF,EAAQpC,SAAUkC,EAAOlC,WAI1EiC,EAAoBC,EAAOlC,YAC5BiC,EAAoBC,EAAOlC,UAAY,CAAEuC,YAAa,EAAGC,MAAO,IAEpEP,EAAoBC,EAAOlC,UAAUuC,aAAeH,EACpDH,EAAoBC,EAAOlC,UAAUwC,WAK7C,IAAIC,EAA2B,KAC3BC,GAAyB,EAC7B,IAAK,MAAML,KAAaN,EAChBA,EAAoBM,GAAWC,MAAQI,IACvCA,EAAwBX,EAAoBM,GAAWC,MACvDG,EAA2B,CACvBrE,GAAIiE,EACJ/D,KAAME,EAAY6D,IAAc,oDAChCC,MAAOI,EACPrC,WAAY5D,EAAesF,EAAoBM,GAAWrC,WAAa,sDAInF/C,EAA4BwF,GAG5B,MAAME,EAA6B,CAAC,EACpC,IAAK,MAAMN,KAAaN,EAAqB,CACzC,MAAM,MAAEO,EAAK,SAAEtC,GAAa+B,EAAoBM,KAC3CM,EAA2B3C,IAAasC,EAAQK,EAA2B3C,GAAUsC,SACtFK,EAA2B3C,GAAY,CACnC5B,GAAIiE,EACJ/D,KAAME,EAAY6D,IAAc,oDAChCC,MAAOA,EACPjC,WAAY5D,EAAeuD,IAAa,qDAGpD,CACA7C,EAA8BwF,GAG9B,IAAIC,EAA4B,KAC5BC,GAA0B,EAC9B,IAAK,MAAMR,KAAaL,EAChBA,EAAqBK,GAAWC,MAAQO,IACxCA,EAAyBb,EAAqBK,GAAWC,MACzDM,EAA4B,CACxBxE,GAAIiE,EACJ/D,KAAME,EAAY6D,IAAc,oDAChCC,MAAOO,EACPxC,WAAY5D,EAAeuF,EAAqBK,GAAWrC,WAAa,sDAIpF3C,EAA6BuF,GAG7B,MAAME,EAA8B,CAAC,EACrC,IAAK,MAAMT,KAAaL,EAAsB,CAC1C,MAAM,MAAEM,EAAK,SAAEtC,GAAagC,EAAqBK,KAC5CS,EAA4B9C,IAAasC,EAAQQ,EAA4B9C,GAAUsC,SACxFQ,EAA4B9C,GAAY,CACpC5B,GAAIiE,EACJ/D,KAAME,EAAY6D,IAAc,oDAChCC,MAAOA,EACPjC,WAAY5D,EAAeuD,IAAa,qDAGpD,CACAzC,EAA+BuF,GAG/B,IAAIC,EAA2B,KAC3BC,GAAgC,EACpC,IAAK,MAAMhD,KAAYiC,EAAqB,CACxC,MAAMgB,EAAkBhB,EAAoBjC,GAAUuC,YAAcN,EAAoBjC,GAAUwC,MAC9FS,EAAkBD,IAClBA,EAA+BC,EAC/BF,EAA2B,CACvB3E,GAAI4B,EACJ1B,KAAM7B,EAAeuD,IAAa,oDAClCkD,cAAeD,EAAgBnC,QAAQ,IAGnD,CACA/D,EAAqBgG,GAIrB/G,EAASmH,IAAS,IACXA,EACHjH,gBACAC,eACAC,cAA4B,UAAbR,EAAuBQ,EAAgB,EACtDC,sBACAC,sBACAC,kBACAC,sBAGR,CAAE,MAAO4G,GACLC,QAAQzG,MAAM,6BAA8BwG,GAC5CvG,EAAS,oHAA4BuG,EAAIE,QAC7C,CAAC,QACG3G,GAAW,EACf,GACD,CAACf,EAAUC,KAEd0H,EAAAA,EAAAA,WAAU,KAEW,UAAb3H,GAAqC,YAAbA,EACxB4B,KAEAb,GAAW,GACXE,EAAS,4MAEd,CAACjB,EAAU4B,IAGd,MAAMgG,EAAU,CACZC,OAAQC,OAAOC,KAAK5H,EAAMM,qBAC1BuH,SAAU,CACN,CACIvF,KAAMqF,OAAOG,OAAO9H,EAAMM,qBAC1ByH,gBAAiB,CACb,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,WAErCC,qBAAsB,CAClB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,cAO3CC,EAAU,CACZP,OAAQ,CAAC,gEAAe,kFAAkB,uEAC1CG,SAAU,CACN,CACIK,MAAO,6CACP5F,KAAM,CAACtC,EAAMO,oBAAqBP,EAAMQ,gBAAiBR,EAAMS,mBAC/DsH,gBAAiB,CACb,0BACA,2BACA,2BAEJI,YAAa,CACT,wBACA,yBACA,yBAEJC,YAAa,KAMzB,OAAIzH,GAAgB0H,EAAAA,EAAAA,KAAA,KAAGC,UAAU,kBAAiBC,SAAC,4HAC/C1H,GAAcwH,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAE1H,IAE/B,UAAbhB,GAAqC,YAAbA,GACjBwI,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAAsBC,SAAC,4MAI3CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2CAA0CC,SAAA,EACrDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,wBAAuBC,SAAC,uGACtCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC1BC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,+EAAeF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAEvI,EAAMG,oBACtDqI,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,qFAAgBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAEvI,EAAMI,kBACzC,UAAbP,IAAwB2I,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,2FAAiBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,SAAEvI,EAAMK,uBAIrFmI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+BAA8BC,SAAA,EACzCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAC,mEAG5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wIACHxH,GACGyH,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAExH,EAAkBwB,OAAY,0EAAeiG,EAAAA,EAAAA,MAAA,QAAMF,UAAU,kBAAiBC,SAAA,CAAExH,EAAkBoG,cAAc,cAGtJkB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,8LAK7CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,8MACHtH,GACGuH,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAEtH,EAAyBsB,OAAY,2CAAS8F,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBC,SAAEtH,EAAyBqD,aAAkB,2CAASkE,EAAAA,EAAAA,MAAA,QAAMF,UAAU,kBAAiBC,SAAA,CAAEtH,EAAyBsF,MAAM,cAG9O8B,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,0MAK7CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kMACHZ,OAAOC,KAAKzG,GAA4BmC,OAAS,GAC9C+E,EAAAA,EAAAA,KAAA,MAAAE,SACKZ,OAAOG,OAAO3G,GAA4BkC,IAAI,CAACoF,EAASC,KACrDF,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAEE,EAAQlG,OAAY,2CAAS8F,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBC,SAAEE,EAAQnE,aAAkB,2CAASkE,EAAAA,EAAAA,MAAA,QAAMF,UAAU,kBAAiBC,SAAA,CAAEE,EAAQlC,MAAM,YADlLmC,OAMjBL,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,gPAK7CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kMACHlH,GACGmH,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAElH,EAA0BkB,OAAY,2CAAS8F,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBC,SAAElH,EAA0BiD,aAAkB,2CAASkE,EAAAA,EAAAA,MAAA,QAAMF,UAAU,kBAAiBC,SAAA,CAAElH,EAA0BkF,MAAM,cAGjP8B,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,8LAK7CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sLACHZ,OAAOC,KAAKrG,GAA6B+B,OAAS,GAC/C+E,EAAAA,EAAAA,KAAA,MAAAE,SACKZ,OAAOG,OAAOvG,GAA6B8B,IAAI,CAACoF,EAASC,KACtDF,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,iBAAgBC,SAAEE,EAAQlG,OAAY,2CAAS8F,EAAAA,EAAAA,KAAA,QAAMC,UAAU,mBAAkBC,SAAEE,EAAQnE,aAAkB,2CAASkE,EAAAA,EAAAA,MAAA,QAAMF,UAAU,kBAAiBC,SAAA,CAAEE,EAAQlC,MAAM,YADlLmC,OAMjBL,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,uOAKjDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAC,iIAC5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,SAC3BZ,OAAOC,KAAK5H,EAAMM,qBAAqBgD,OAAS,GAC7C+E,EAAAA,EAAAA,KAACM,EAAAA,GAAG,CAACrG,KAAMmF,EAASmB,QAAS,CAAEC,YAAY,EAAMC,qBAAqB,MAEtET,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,gKAIzCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAC,2KAC5BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,SAC3BvI,EAAMO,oBAAsB,GAAKP,EAAMQ,gBAAkB,GAAKR,EAAMS,kBAAoB,GACrF4H,EAAAA,EAAAA,KAACU,EAAAA,GAAG,CAACzG,KAAM2F,EAASW,QAAS,CAAEC,YAAY,EAAMC,qBAAqB,MAEtET,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,gLAOzD,CA9fAS,EAAAA,GAAQC,SAASC,EAAAA,GAAYC,EAAAA,GAASC,EAAAA,GAAQC,EAAAA,GAAeC,EAAAA,GAAaC,EAAAA,GAAYC,EAAAA,G","sources":["components/StatisticsPage.js"],"sourcesContent":["// src/pages/StatisticsPage.js\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { db } from \"../firebaseConfig\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { Pie, Bar } from \"react-chartjs-2\";\r\n// Chart.js components registration (assuming this is handled globally or in Charts.js)\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title } from 'chart.js';\r\nChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title);\r\n\r\nimport '../Styles/StatisticsPageStyles.css'; // استيراد ملف التنسيقات الخارجي\r\n\r\nexport default function StatisticsPage() {\r\n    const { userRole, currentUser } = useAuth();\r\n    const [stats, setStats] = useState({\r\n        totalStudents: 0,\r\n        totalHalaqat: 0,\r\n        totalTeachers: 0,\r\n        studentDistribution: {}, // توزيع الطلاب حسب الحلقة\r\n        averageMemorization: 0,\r\n        averageRevision: 0,\r\n        averageAttendance: 0,\r\n        halaqaNamesMap: {}, // لتخزين أسماء الحلقات لتسميات الرسوم البيانية\r\n    });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    // حالات جديدة لأفضل الطلاب والحلقات\r\n    const [bestHalaqaOfMonth, setBestHalaqaOfMonth] = useState(null);\r\n    const [bestStudentOfWeekOverall, setBestStudentOfWeekOverall] = useState(null);\r\n    const [bestStudentOfWeekPerHalaqa, setBestStudentOfWeekPerHalaqa] = useState({});\r\n    const [bestStudentOfMonthOverall, setBestStudentOfMonthOverall] = useState(null);\r\n    const [bestStudentOfMonthPerHalaqa, setBestStudentOfMonthPerHalaqa] = useState({});\r\n\r\n    /**\r\n     * دالة مساعدة لحساب إحصائيات توزيع الطلاب.\r\n     * @param {Array} studentsSnapshot - لقطة بيانات الطلاب من Firestore.\r\n     * @param {Object} halaqaNamesMap - خريطة بأسماء الحلقات ومعرفاتها.\r\n     * @returns {Object} كائن يمثل توزيع الطلاب حسب الحلقة.\r\n     */\r\n    const calculateStudentDistribution = (studentsSnapshot, halaqaNamesMap) => {\r\n        const distribution = {};\r\n        studentsSnapshot.forEach(doc => {\r\n            const studentData = doc.data();\r\n            const halaqaId = studentData.halaqaId;\r\n            if (halaqaId && halaqaNamesMap[halaqaId]) {\r\n                const halaqaName = halaqaNamesMap[halaqaId];\r\n                distribution[halaqaName] = (distribution[halaqaName] || 0) + 1;\r\n            }\r\n        });\r\n        return distribution;\r\n    };\r\n\r\n    /**\r\n     * دالة مساعدة لحساب متوسطات الأداء من التقارير الأسبوعية.\r\n     * @param {Array} weeklyReportsSnapshot - لقطة بيانات التقارير الأسبوعية من Firestore.\r\n     * @returns {Object} كائن يحتوي على متوسطات الحفظ والمراجعة والحضور.\r\n     */\r\n    const calculateAveragePerformance = (weeklyReportsSnapshot) => {\r\n        let totalMemorization = 0;\r\n        let totalRevision = 0;\r\n        let totalAttendance = 0;\r\n        let reportCount = 0;\r\n\r\n        weeklyReportsSnapshot.forEach(doc => {\r\n            const reportData = doc.data();\r\n            totalMemorization += reportData.pagesMemorized || 0;\r\n            totalRevision += reportData.partsRevised || 0;\r\n            totalAttendance += reportData.attendanceDays || 0;\r\n            reportCount++;\r\n        });\r\n\r\n        const averageMemorization = reportCount > 0 ? (totalMemorization / reportCount).toFixed(2) : 0;\r\n        const averageRevision = reportCount > 0 ? (totalRevision / reportCount).toFixed(2) : 0;\r\n        const averageAttendance = reportCount > 0 ? (totalAttendance / reportCount).toFixed(2) : 0;\r\n\r\n        return {\r\n            averageMemorization: parseFloat(averageMemorization),\r\n            averageRevision: parseFloat(averageRevision),\r\n            averageAttendance: parseFloat(averageAttendance),\r\n        };\r\n    };\r\n\r\n    /**\r\n     * دالة مساعدة للحصول على بداية الأسبوع (الأحد) لتاريخ معين.\r\n     * @param {Date} date - التاريخ.\r\n     * @returns {Date} بداية الأسبوع.\r\n     */\r\n    const getStartOfWeek = (date) => {\r\n        const d = new Date(date);\r\n        const day = d.getDay(); // 0 for Sunday, 1 for Monday, etc.\r\n        const diff = d.getDate() - day; // Adjust to Sunday\r\n        d.setDate(diff);\r\n        d.setHours(0, 0, 0, 0);\r\n        return d;\r\n    };\r\n\r\n    /**\r\n     * دالة مساعدة للحصول على بداية الشهر لتاريخ معين.\r\n     * @param {Date} date - التاريخ.\r\n     * @returns {Date} بداية الشهر.\r\n     */\r\n    const getStartOfMonth = (date) => {\r\n        const d = new Date(date);\r\n        d.setDate(1);\r\n        d.setHours(0, 0, 0, 0);\r\n        return d;\r\n    };\r\n\r\n    /**\r\n     * دالة لجلب الإحصائيات من Firestore بناءً على دور المستخدم.\r\n     */\r\n    const fetchStats = useCallback(async () => {\r\n        setLoading(true);\r\n        setError(\"\");\r\n        try {\r\n            let studentsQueryRef = collection(db, \"students\");\r\n            let halaqatQueryRef = collection(db, \"halaqat\");\r\n            let weeklyReportsQueryRef = collection(db, \"weeklyReports\");\r\n            let usersQueryRef = collection(db, \"users\"); // لجلب جميع المستخدمين لتحديد المعلمين\r\n\r\n            // جلب الحلقات أولاً للحصول على halaqatNamesMap مبكرًا\r\n            const allHalaqatSnapshot = await getDocs(collection(db, \"halaqat\"));\r\n            const halaqaNamesMap = {};\r\n            allHalaqatSnapshot.forEach(doc => {\r\n                halaqaNamesMap[doc.id] = doc.data().name;\r\n            });\r\n\r\n            // جلب الطلاب والمعلمين للحصول على أسمائهم\r\n            const allStudentsSnapshot = await getDocs(collection(db, \"students\"));\r\n            const studentsMap = {};\r\n            allStudentsSnapshot.forEach(doc => {\r\n                studentsMap[doc.id] = doc.data().name;\r\n            });\r\n\r\n            const allTeachersSnapshot = await getDocs(collection(db, \"users\"));\r\n            const teachersMap = {};\r\n            allTeachersSnapshot.docs.filter(doc => doc.data().role === 'teacher').forEach(doc => {\r\n                teachersMap[doc.id] = doc.data().name || doc.data().email;\r\n            });\r\n\r\n\r\n            // تصفية الاستعلامات بناءً على دور المستخدم\r\n            if (userRole === \"teacher\" && currentUser) {\r\n                // جلب الحلقات المرتبطة بالمعلم\r\n                const teacherHalaqatSnapshot = await getDocs(query(collection(db, \"halaqat\"), where(\"teacherId\", \"==\", currentUser.uid)));\r\n                const teacherHalaqaIds = teacherHalaqatSnapshot.docs.map(doc => doc.id);\r\n\r\n                if (teacherHalaqaIds.length === 0) {\r\n                    // إذا لم يكن للمعلم حلقات، فلا توجد إحصائيات لعرضها\r\n                    setStats({\r\n                        totalStudents: 0,\r\n                        totalHalaqat: 0,\r\n                        totalTeachers: 0,\r\n                        studentDistribution: {},\r\n                        averageMemorization: 0,\r\n                        averageRevision: 0,\r\n                        averageAttendance: 0,\r\n                        halaqaNamesMap: {},\r\n                    });\r\n                    setBestHalaqaOfMonth(null);\r\n                    setBestStudentOfWeekOverall(null);\r\n                    setBestStudentOfWeekPerHalaqa({});\r\n                    setBestStudentOfMonthOverall(null);\r\n                    setBestStudentOfMonthPerHalaqa({});\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n\r\n                // تصفية الطلاب بناءً على الحلقات المرتبطة بالمعلم\r\n                studentsQueryRef = query(studentsQueryRef, where(\"halaqaId\", \"in\", teacherHalaqaIds));\r\n                // تصفية التقارير الأسبوعية بناءً على الحلقات المرتبطة بالمعلم\r\n                weeklyReportsQueryRef = query(weeklyReportsQueryRef, where(\"halaqaId\", \"in\", teacherHalaqaIds));\r\n\r\n                // تحديث halaqatNamesMap لتشمل فقط حلقات المعلم\r\n                const teacherHalaqatNamesMap = {};\r\n                teacherHalaqatSnapshot.forEach(doc => {\r\n                    teacherHalaqatNamesMap[doc.id] = doc.data().name;\r\n                });\r\n                setStats(prev => ({ ...prev, halaqaNamesMap: teacherHalaqatNamesMap }));\r\n\r\n            } else {\r\n                // للمدير، استخدم الخريطة الكاملة للحلقات\r\n                setStats(prev => ({ ...prev, halaqaNamesMap: halaqaNamesMap }));\r\n            }\r\n\r\n            // جلب البيانات بشكل متزامن\r\n            const [\r\n                studentsSnapshot,\r\n                weeklyReportsSnapshot,\r\n                usersSnapshotForTeachers // جلب المستخدمين لتحديد المعلمين\r\n            ] = await Promise.all([\r\n                getDocs(studentsQueryRef),\r\n                getDocs(weeklyReportsQueryRef),\r\n                getDocs(usersQueryRef)\r\n            ]);\r\n\r\n            const totalStudents = studentsSnapshot.size;\r\n            const totalHalaqat = userRole === \"teacher\" ? studentsSnapshot.docs.reduce((acc, doc) => {\r\n                const halaqaId = doc.data().halaqaId;\r\n                if (halaqaId && !acc.includes(halaqaId)) {\r\n                    acc.push(halaqaId);\r\n                }\r\n                return acc;\r\n            }, []).length : allHalaqatSnapshot.size; // عدد الحلقات التي بها طلاب للمعلم، أو كل الحلقات للمدير\r\n\r\n            const totalTeachers = usersSnapshotForTeachers.docs.filter(doc => doc.data().role === 'teacher').length;\r\n\r\n            // حساب توزيع الطلاب\r\n            const studentDistribution = calculateStudentDistribution(studentsSnapshot, halaqaNamesMap);\r\n\r\n            // حساب متوسطات الأداء\r\n            const { averageMemorization, averageRevision, averageAttendance } = calculateAveragePerformance(weeklyReportsSnapshot);\r\n\r\n            // ===================================================================================\r\n            // حساب أفضل الحلقات والطلاب\r\n            // ===================================================================================\r\n            const now = new Date();\r\n            const startOfCurrentWeek = getStartOfWeek(now);\r\n            const startOfCurrentMonth = getStartOfMonth(now);\r\n\r\n            const weeklyStudentScores = {}; // { studentId: { score: X, halaqaId: Y } }\r\n            const monthlyStudentScores = {}; // { studentId: { score: X, halaqaId: Y } }\r\n            const monthlyHalaqaScores = {}; // { halaqaId: { score: X, count: Y } }\r\n\r\n            weeklyReportsSnapshot.forEach(doc => {\r\n                const report = doc.data();\r\n                const reportDate = new Date(report.reportDate); // Assuming reportDate is in a parseable format\r\n\r\n                // Ensure rating is a number\r\n                const rating = parseFloat(report.rating) || 0;\r\n\r\n                // Check for current week reports\r\n                if (reportDate >= startOfCurrentWeek && reportDate <= now) {\r\n                    if (!weeklyStudentScores[report.studentId] || rating > weeklyStudentScores[report.studentId].score) {\r\n                        weeklyStudentScores[report.studentId] = { score: rating, halaqaId: report.halaqaId };\r\n                    }\r\n                }\r\n\r\n                // Check for current month reports\r\n                if (reportDate >= startOfCurrentMonth && reportDate <= now) {\r\n                    // Student scores for the month\r\n                    if (!monthlyStudentScores[report.studentId] || rating > monthlyStudentScores[report.studentId].score) {\r\n                        monthlyStudentScores[report.studentId] = { score: rating, halaqaId: report.halaqaId };\r\n                    }\r\n\r\n                    // Halaqa scores for the month (sum of ratings for simplicity, can be average)\r\n                    if (!monthlyHalaqaScores[report.halaqaId]) {\r\n                        monthlyHalaqaScores[report.halaqaId] = { totalRating: 0, count: 0 };\r\n                    }\r\n                    monthlyHalaqaScores[report.halaqaId].totalRating += rating;\r\n                    monthlyHalaqaScores[report.halaqaId].count++;\r\n                }\r\n            });\r\n\r\n            // تحديد أفضل طالب في الأسبوع (على الجميع)\r\n            let overallBestStudentOfWeek = null;\r\n            let maxOverallWeeklyScore = -1;\r\n            for (const studentId in weeklyStudentScores) {\r\n                if (weeklyStudentScores[studentId].score > maxOverallWeeklyScore) {\r\n                    maxOverallWeeklyScore = weeklyStudentScores[studentId].score;\r\n                    overallBestStudentOfWeek = {\r\n                        id: studentId,\r\n                        name: studentsMap[studentId] || \"غير معروف\",\r\n                        score: maxOverallWeeklyScore,\r\n                        halaqaName: halaqaNamesMap[weeklyStudentScores[studentId].halaqaId] || \"غير معروف\"\r\n                    };\r\n                }\r\n            }\r\n            setBestStudentOfWeekOverall(overallBestStudentOfWeek);\r\n\r\n            // تحديد أفضل طالب في الأسبوع لكل حلقة\r\n            const perHalaqaBestStudentOfWeek = {};\r\n            for (const studentId in weeklyStudentScores) {\r\n                const { score, halaqaId } = weeklyStudentScores[studentId];\r\n                if (!perHalaqaBestStudentOfWeek[halaqaId] || score > perHalaqaBestStudentOfWeek[halaqaId].score) {\r\n                    perHalaqaBestStudentOfWeek[halaqaId] = {\r\n                        id: studentId,\r\n                        name: studentsMap[studentId] || \"غير معروف\",\r\n                        score: score,\r\n                        halaqaName: halaqaNamesMap[halaqaId] || \"غير معروف\"\r\n                    };\r\n                }\r\n            }\r\n            setBestStudentOfWeekPerHalaqa(perHalaqaBestStudentOfWeek);\r\n\r\n            // تحديد أفضل طالب في الشهر (على الجميع)\r\n            let overallBestStudentOfMonth = null;\r\n            let maxOverallMonthlyScore = -1;\r\n            for (const studentId in monthlyStudentScores) {\r\n                if (monthlyStudentScores[studentId].score > maxOverallMonthlyScore) {\r\n                    maxOverallMonthlyScore = monthlyStudentScores[studentId].score;\r\n                    overallBestStudentOfMonth = {\r\n                        id: studentId,\r\n                        name: studentsMap[studentId] || \"غير معروف\",\r\n                        score: maxOverallMonthlyScore,\r\n                        halaqaName: halaqaNamesMap[monthlyStudentScores[studentId].halaqaId] || \"غير معروف\"\r\n                    };\r\n                }\r\n            }\r\n            setBestStudentOfMonthOverall(overallBestStudentOfMonth);\r\n\r\n            // تحديد أفضل طالب في الشهر لكل حلقة\r\n            const perHalaqaBestStudentOfMonth = {};\r\n            for (const studentId in monthlyStudentScores) {\r\n                const { score, halaqaId } = monthlyStudentScores[studentId];\r\n                if (!perHalaqaBestStudentOfMonth[halaqaId] || score > perHalaqaBestStudentOfMonth[halaqaId].score) {\r\n                    perHalaqaBestStudentOfMonth[halaqaId] = {\r\n                        id: studentId,\r\n                        name: studentsMap[studentId] || \"غير معروف\",\r\n                        score: score,\r\n                        halaqaName: halaqaNamesMap[halaqaId] || \"غير معروف\"\r\n                    };\r\n                }\r\n            }\r\n            setBestStudentOfMonthPerHalaqa(perHalaqaBestStudentOfMonth);\r\n\r\n            // تحديد أفضل حلقة في الشهر\r\n            let overallBestHalaqaOfMonth = null;\r\n            let maxOverallHalaqaMonthlyScore = -1;\r\n            for (const halaqaId in monthlyHalaqaScores) {\r\n                const avgHalaqaRating = monthlyHalaqaScores[halaqaId].totalRating / monthlyHalaqaScores[halaqaId].count;\r\n                if (avgHalaqaRating > maxOverallHalaqaMonthlyScore) {\r\n                    maxOverallHalaqaMonthlyScore = avgHalaqaRating;\r\n                    overallBestHalaqaOfMonth = {\r\n                        id: halaqaId,\r\n                        name: halaqaNamesMap[halaqaId] || \"غير معروف\",\r\n                        averageRating: avgHalaqaRating.toFixed(2)\r\n                    };\r\n                }\r\n            }\r\n            setBestHalaqaOfMonth(overallBestHalaqaOfMonth);\r\n\r\n            // ===================================================================================\r\n\r\n            setStats(prevStats => ({\r\n                ...prevStats,\r\n                totalStudents,\r\n                totalHalaqat,\r\n                totalTeachers: userRole === \"admin\" ? totalTeachers : 0, // عرض المعلمين فقط للمدير\r\n                studentDistribution,\r\n                averageMemorization,\r\n                averageRevision,\r\n                averageAttendance,\r\n            }));\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching statistics:\", err);\r\n            setError(\"فشل في جلب الإحصائيات: \" + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [userRole, currentUser]);\r\n\r\n    useEffect(() => {\r\n        // جلب الإحصائيات فقط إذا كان المستخدم مسؤولاً أو معلمًا\r\n        if (userRole === \"admin\" || userRole === \"teacher\") {\r\n            fetchStats();\r\n        } else {\r\n            setLoading(false);\r\n            setError(\"ليس لديك الصلاحية لعرض هذه الإحصائيات.\");\r\n        }\r\n    }, [userRole, fetchStats]);\r\n\r\n    // بيانات الرسم البياني الدائري لتوزيع الطلاب\r\n    const pieData = {\r\n        labels: Object.keys(stats.studentDistribution),\r\n        datasets: [\r\n            {\r\n                data: Object.values(stats.studentDistribution),\r\n                backgroundColor: [\r\n                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40',\r\n                    '#E7E9ED', '#8D6E63', '#C0CA33', '#7CB342'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40',\r\n                    '#E7E9ED', '#8D6E63', '#C0CA33', '#7CB342'\r\n                ],\r\n            },\r\n        ],\r\n    };\r\n\r\n    // بيانات الرسم البياني الشريطي لمتوسط الأداء\r\n    const barData = {\r\n        labels: ['متوسط الحفظ', 'متوسط المراجعة', 'متوسط الحضور'],\r\n        datasets: [\r\n            {\r\n                label: 'المتوسط',\r\n                data: [stats.averageMemorization, stats.averageRevision, stats.averageAttendance],\r\n                backgroundColor: [\r\n                    'rgba(75, 192, 192, 0.6)',\r\n                    'rgba(153, 102, 255, 0.6)',\r\n                    'rgba(255, 159, 64, 0.6)',\r\n                ],\r\n                borderColor: [\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)',\r\n                ],\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    // عرض رسائل التحميل والخطأ والصلاحيات\r\n    if (loading) return <p className=\"loading-message\">جاري تحميل الإحصائيات...</p>;\r\n    if (error) return <p className=\"error-message\">{error}</p>;\r\n\r\n    if (userRole !== \"admin\" && userRole !== \"teacher\") {\r\n        return <p className=\"unauthorized-message\">ليس لديك الصلاحية لعرض هذه الإحصائيات.</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"statistics-page-container page-container\">\r\n            <h2 className=\"statistics-page-title\">الإحصائيات العامة</h2>\r\n            <div className=\"stats-summary\">\r\n                <p>إجمالي الطلاب: <span className=\"stat-value\">{stats.totalStudents}</span></p>\r\n                <p>إجمالي الحلقات: <span className=\"stat-value\">{stats.totalHalaqat}</span></p>\r\n                {userRole === \"admin\" && <p>إجمالي المعلمين: <span className=\"stat-value\">{stats.totalTeachers}</span></p>}\r\n            </div>\r\n\r\n            {/* قسم أفضل الحلقات والطلاب */}\r\n            <div className=\"best-performers-section card\">\r\n                <h3 className=\"chart-title\">أفضل الأداء</h3>\r\n\r\n                {/* أفضل حلقة في الشهر */}\r\n                <div className=\"best-item\">\r\n                    <h4>أفضل حلقة في الشهر الحالي:</h4>\r\n                    {bestHalaqaOfMonth ? (\r\n                        <p>\r\n                            <span className=\"performer-name\">{bestHalaqaOfMonth.name}</span> بمتوسط تقييم: <span className=\"performer-score\">{bestHalaqaOfMonth.averageRating}/100</span>\r\n                        </p>\r\n                    ) : (\r\n                        <p className=\"no-data-message-small\">لا توجد بيانات لأفضل حلقة هذا الشهر.</p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* أفضل طالب في الأسبوع (على الجميع) */}\r\n                <div className=\"best-item\">\r\n                    <h4>أفضل طالب في الأسبوع الحالي (على الجميع):</h4>\r\n                    {bestStudentOfWeekOverall ? (\r\n                        <p>\r\n                            <span className=\"performer-name\">{bestStudentOfWeekOverall.name}</span> من حلقة <span className=\"performer-halaqa\">{bestStudentOfWeekOverall.halaqaName}</span> بتقييم: <span className=\"performer-score\">{bestStudentOfWeekOverall.score}/100</span>\r\n                        </p>\r\n                    ) : (\r\n                        <p className=\"no-data-message-small\">لا توجد بيانات لأفضل طالب هذا الأسبوع.</p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* أفضل طالب في الأسبوع (لكل حلقة) */}\r\n                <div className=\"best-item\">\r\n                    <h4>أفضل طالب في الأسبوع الحالي (لكل حلقة):</h4>\r\n                    {Object.keys(bestStudentOfWeekPerHalaqa).length > 0 ? (\r\n                        <ul>\r\n                            {Object.values(bestStudentOfWeekPerHalaqa).map((student, index) => (\r\n                                <li key={index}>\r\n                                    <span className=\"performer-name\">{student.name}</span> من حلقة <span className=\"performer-halaqa\">{student.halaqaName}</span> بتقييم: <span className=\"performer-score\">{student.score}/100</span>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : (\r\n                        <p className=\"no-data-message-small\">لا توجد بيانات لأفضل طالب في الأسبوع لكل حلقة.</p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* أفضل طالب في الشهر (على الجميع) */}\r\n                <div className=\"best-item\">\r\n                    <h4>أفضل طالب في الشهر الحالي (على الجميع):</h4>\r\n                    {bestStudentOfMonthOverall ? (\r\n                        <p>\r\n                            <span className=\"performer-name\">{bestStudentOfMonthOverall.name}</span> من حلقة <span className=\"performer-halaqa\">{bestStudentOfMonthOverall.halaqaName}</span> بتقييم: <span className=\"performer-score\">{bestStudentOfMonthOverall.score}/100</span>\r\n                        </p>\r\n                    ) : (\r\n                        <p className=\"no-data-message-small\">لا توجد بيانات لأفضل طالب هذا الشهر.</p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* أفضل طالب في الشهر (لكل حلقة) */}\r\n                <div className=\"best-item\">\r\n                    <h4>أفضل طالب في الشهر الحالي (لكل حلقة):</h4>\r\n                    {Object.keys(bestStudentOfMonthPerHalaqa).length > 0 ? (\r\n                        <ul>\r\n                            {Object.values(bestStudentOfMonthPerHalaqa).map((student, index) => (\r\n                                <li key={index}>\r\n                                    <span className=\"performer-name\">{student.name}</span> من حلقة <span className=\"performer-halaqa\">{student.halaqaName}</span> بتقييم: <span className=\"performer-score\">{student.score}/100</span>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : (\r\n                        <p className=\"no-data-message-small\">لا توجد بيانات لأفضل طالب في الشهر لكل حلقة.</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"charts-grid\">\r\n                <div className=\"chart-card\">\r\n                    <h3 className=\"chart-title\">توزيع الطلاب حسب الحلقة</h3>\r\n                    <div className=\"chart-container\">\r\n                        {Object.keys(stats.studentDistribution).length > 0 ? (\r\n                            <Pie data={pieData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n                        ) : (\r\n                            <p className=\"no-chart-data\">لا توجد بيانات لتوزيع الطلاب.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"chart-card\">\r\n                    <h3 className=\"chart-title\">متوسط الحفظ، المراجعة، والحضور</h3>\r\n                    <div className=\"chart-container\">\r\n                        {stats.averageMemorization > 0 || stats.averageRevision > 0 || stats.averageAttendance > 0 ? (\r\n                            <Bar data={barData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n                        ) : (\r\n                            <p className=\"no-chart-data\">لا توجد بيانات لمتوسطات الأداء.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"names":["StatisticsPage","userRole","currentUser","useAuth","stats","setStats","useState","totalStudents","totalHalaqat","totalTeachers","studentDistribution","averageMemorization","averageRevision","averageAttendance","halaqaNamesMap","loading","setLoading","error","setError","bestHalaqaOfMonth","setBestHalaqaOfMonth","bestStudentOfWeekOverall","setBestStudentOfWeekOverall","bestStudentOfWeekPerHalaqa","setBestStudentOfWeekPerHalaqa","bestStudentOfMonthOverall","setBestStudentOfMonthOverall","bestStudentOfMonthPerHalaqa","setBestStudentOfMonthPerHalaqa","fetchStats","useCallback","async","studentsQueryRef","collection","db","weeklyReportsQueryRef","usersQueryRef","allHalaqatSnapshot","getDocs","forEach","doc","id","data","name","allStudentsSnapshot","studentsMap","allTeachersSnapshot","teachersMap","docs","filter","role","email","teacherHalaqatSnapshot","query","where","uid","teacherHalaqaIds","map","length","teacherHalaqatNamesMap","prev","studentsSnapshot","weeklyReportsSnapshot","usersSnapshotForTeachers","Promise","all","size","reduce","acc","halaqaId","includes","push","calculateStudentDistribution","distribution","halaqaName","totalMemorization","totalRevision","totalAttendance","reportCount","reportData","pagesMemorized","partsRevised","attendanceDays","toFixed","parseFloat","calculateAveragePerformance","now","Date","startOfCurrentWeek","date","d","day","getDay","diff","getDate","setDate","setHours","getStartOfWeek","startOfCurrentMonth","getStartOfMonth","weeklyStudentScores","monthlyStudentScores","monthlyHalaqaScores","report","reportDate","rating","studentId","score","totalRating","count","overallBestStudentOfWeek","maxOverallWeeklyScore","perHalaqaBestStudentOfWeek","overallBestStudentOfMonth","maxOverallMonthlyScore","perHalaqaBestStudentOfMonth","overallBestHalaqaOfMonth","maxOverallHalaqaMonthlyScore","avgHalaqaRating","averageRating","prevStats","err","console","message","useEffect","pieData","labels","Object","keys","datasets","values","backgroundColor","hoverBackgroundColor","barData","label","borderColor","borderWidth","_jsx","className","children","_jsxs","student","index","Pie","options","responsive","maintainAspectRatio","Bar","ChartJS","register","ArcElement","Tooltip","Legend","CategoryScale","LinearScale","BarElement","Title"],"sourceRoot":""}