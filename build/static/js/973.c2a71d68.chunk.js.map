{"version":3,"file":"static/js/973.c2a71d68.chunk.js","mappings":"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","sources":["components/CustomModal.js","components/UserProfilePage.js"],"sourcesContent":["// src/components/CustomModal.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport '../Styles/CustomModalStyles.css';\r\n\r\nconst CustomModal = ({ isOpen, title, message, children, onConfirm, onCancel, showCancelButton = true, closeOnOverlayClick = false }) => {\r\n    const modalRef = useRef(null);\r\n\r\n    // Effect to manage focus and keyboard accessibility\r\n    // تأثير لإدارة التركيز وإمكانية الوصول عبر لوحة المفاتيح\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            // Focus the modal content when it opens\r\n            // تركيز محتوى المودال عند فتحه\r\n            modalRef.current?.focus();\r\n\r\n            // Add event listener for Escape key to close modal\r\n            // إضافة مستمع حدث لمفتاح Escape لإغلاق المودال\r\n            const handleEscape = (event) => {\r\n                if (event.key === 'Escape') {\r\n                    onCancel(); // Use onCancel to close the modal\r\n                }\r\n            };\r\n            document.addEventListener('keydown', handleEscape);\r\n\r\n            // Cleanup function to remove event listener\r\n            // دالة تنظيف لإزالة مستمع الحدث\r\n            return () => {\r\n                document.removeEventListener('keydown', handleEscape);\r\n            };\r\n        }\r\n    }, [isOpen, onCancel]);\r\n\r\n    // If modal is not open, return null to render nothing\r\n    // إذا لم يكن المودال مفتوحًا، أعد قيمة null لعدم عرض أي شيء\r\n    if (!isOpen) return null;\r\n\r\n    // Handle overlay click to close modal if allowed\r\n    // معالجة النقر على الخلفية لإغلاق المودال إذا كان مسموحًا\r\n    const handleOverlayClick = (e) => {\r\n        if (closeOnOverlayClick && modalRef.current && !modalRef.current.contains(e.target)) {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay\" onClick={handleOverlayClick}>\r\n            <div\r\n                className=\"modal-content\"\r\n                ref={modalRef}\r\n                role=\"dialog\" // ARIA role for dialog\r\n                aria-modal=\"true\" // Indicates that the dialog is modal\r\n                aria-labelledby=\"modal-title\" // Links to the title for accessibility\r\n                aria-describedby=\"modal-message\" // Links to the message for accessibility\r\n                tabIndex=\"-1\" // Makes the modal content focusable\r\n            >\r\n                <h3 id=\"modal-title\" className=\"modal-title\">{title}</h3>\r\n                {message && <p id=\"modal-message\" className=\"modal-message\">{message}</p>}\r\n                {children && <div className=\"modal-body\">{children}</div>} {/* عرض المحتوى المخصص */}\r\n                <div className=\"modal-actions\">\r\n                    <button onClick={onConfirm} className=\"modal-confirm-button\">\r\n                        تأكيد\r\n                    </button>\r\n                    {showCancelButton && (\r\n                        <button onClick={onCancel} className=\"modal-cancel-button\">\r\n                            إلغاء\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomModal;\r\n","// src/pages/UserProfilePage.js\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { db } from '../firebaseConfig'; // استيراد db\r\nimport { doc, getDoc, updateDoc } from 'firebase/firestore'; // استيراد doc, getDoc, updateDoc\r\nimport { getAuth, sendPasswordResetEmail } from 'firebase/auth'; // استيراد sendPasswordResetEmail\r\nimport CustomModal from '../components/CustomModal'; // استيراد مكون المودال المخصص\r\nimport '../Styles/UserProfilePageStyles.css'; // استيراد ملف التنسيقات\r\n\r\nexport default function UserProfilePage() {\r\n    const { currentUser, userRole, loading: authLoading } = useAuth();\r\n    const firebaseAuth = getAuth(); // الحصول على كائن المصادقة من Firebase\r\n\r\n    const [profileName, setProfileName] = useState('');\r\n    const [associatedHalaqat, setAssociatedHalaqat] = useState([]); // للمعلمين\r\n    const [associatedStudents, setAssociatedStudents] = useState([]); // لأولياء الأمور/الضيوف\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [isEditingName, setIsEditingName] = useState(false);\r\n\r\n    // حالات المودال\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalConfig, setModalConfig] = useState({});\r\n\r\n    // دالة لجلب بيانات الملف الشخصي من Firestore\r\n    const fetchUserProfile = useCallback(async () => {\r\n        if (!currentUser || authLoading) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        setError('');\r\n        setMessage(''); // مسح الرسائل السابقة\r\n        try {\r\n            const userDocRef = doc(db, 'users', currentUser.uid);\r\n            const userDocSnap = await getDoc(userDocRef);\r\n            if (userDocSnap.exists()) {\r\n                const userData = userDocSnap.data();\r\n                setProfileName(userData.name || currentUser.displayName || currentUser.email);\r\n\r\n                // جلب أسماء الحلقات/الطلاب المرتبطة\r\n                if (userData.role === 'teacher' && userData.associatedHalaqat && userData.associatedHalaqat.length > 0) {\r\n                    const halaqatPromises = userData.associatedHalaqat.map(id => getDoc(doc(db, 'halaqat', id)));\r\n                    const halaqatSnaps = await Promise.all(halaqatPromises);\r\n                    const names = halaqatSnaps.map(snap => snap.exists() ? snap.data().name : 'حلقة غير معروفة');\r\n                    setAssociatedHalaqat(names);\r\n                } else {\r\n                    setAssociatedHalaqat([]);\r\n                }\r\n\r\n                if (userData.role === 'guest' && userData.associatedStudents && userData.associatedStudents.length > 0) {\r\n                    const studentsPromises = userData.associatedStudents.map(id => getDoc(doc(db, 'students', id)));\r\n                    const studentsSnaps = await Promise.all(studentsPromises);\r\n                    const names = studentsSnaps.map(snap => snap.exists() ? snap.data().name : 'طالب غير معروف');\r\n                    setAssociatedStudents(names);\r\n                } else {\r\n                    setAssociatedStudents([]);\r\n                }\r\n\r\n            } else {\r\n                setProfileName(currentUser.displayName || currentUser.email); // استخدام الاسم من Auth إذا لم يكن في Firestore\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching user profile:\", err);\r\n            setError('فشل جلب بيانات الملف الشخصي: ' + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentUser, authLoading]);\r\n\r\n    useEffect(() => {\r\n        fetchUserProfile();\r\n    }, [fetchUserProfile]);\r\n\r\n    // دالة لتحديث اسم الملف الشخصي\r\n    const handleUpdateProfileName = useCallback(async () => {\r\n        setError('');\r\n        setMessage('');\r\n        if (!profileName.trim()) {\r\n            setError('الاسم لا يمكن أن يكون فارغاً.');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const userDocRef = doc(db, 'users', currentUser.uid);\r\n            await updateDoc(userDocRef, { name: profileName.trim() });\r\n            // إذا كان الاسم في Firebase Auth مختلفاً، يمكن تحديثه أيضاً\r\n            if (currentUser.displayName !== profileName.trim()) {\r\n                await currentUser.updateProfile({ displayName: profileName.trim() });\r\n            }\r\n            setMessage('تم تحديث الاسم بنجاح!');\r\n            setIsEditingName(false);\r\n        } catch (err) {\r\n            console.error(\"Error updating profile name:\", err);\r\n            setError('فشل تحديث الاسم: ' + err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [profileName, currentUser]);\r\n\r\n    // دالة لإعادة تعيين كلمة المرور\r\n    const handlePasswordReset = useCallback(() => {\r\n        if (!currentUser || !currentUser.email) {\r\n            setError('لا يوجد بريد إلكتروني لإعادة تعيين كلمة المرور.');\r\n            return;\r\n        }\r\n\r\n        setModalConfig({\r\n            title: \"إعادة تعيين كلمة المرور\",\r\n            message: `هل أنت متأكد أنك تريد إرسال بريد إلكتروني لإعادة تعيين كلمة المرور إلى ${currentUser.email}؟`,\r\n            onConfirm: async () => {\r\n                setShowModal(false);\r\n                setLoading(true);\r\n                setError('');\r\n                setMessage('');\r\n                try {\r\n                    await sendPasswordResetEmail(firebaseAuth, currentUser.email);\r\n                    setMessage('تم إرسال رابط إعادة تعيين كلمة المرور إلى بريدك الإلكتروني. يرجى التحقق من صندوق الوارد والبريد المزعج.');\r\n                } catch (err) {\r\n                    console.error(\"Password reset error:\", err);\r\n                    setError('فشل في إرسال رابط إعادة تعيين كلمة المرور: ' + err.message);\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            },\r\n            onCancel: () => setShowModal(false),\r\n            showCancelButton: true,\r\n        });\r\n        setShowModal(true);\r\n    }, [currentUser, firebaseAuth]);\r\n\r\n\r\n    if (loading) {\r\n        return <p className=\"loading-message\">جاري تحميل الملف الشخصي...</p>;\r\n    }\r\n\r\n    if (!currentUser) {\r\n        return <p className=\"info-message\">يرجى تسجيل الدخول لعرض ملفك الشخصي.</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-profile-container page-container\">\r\n            <h2 className=\"profile-title\">ملفي الشخصي</h2>\r\n\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {message && <p className=\"success-message\">{message}</p>}\r\n\r\n            <div className=\"profile-details card\">\r\n                <div className=\"detail-item\">\r\n                    <strong>البريد الإلكتروني:</strong> <span>{currentUser.email}</span>\r\n                </div>\r\n                <div className=\"detail-item\">\r\n                    <strong>الصلاحية:</strong> <span>{userRole}</span>\r\n                </div>\r\n                <div className=\"detail-item\">\r\n                    <strong>الاسم:</strong>\r\n                    {isEditingName ? (\r\n                        <div className=\"edit-name-section\">\r\n                            <input\r\n                                type=\"text\"\r\n                                value={profileName}\r\n                                onChange={(e) => setProfileName(e.target.value)}\r\n                                className=\"edit-input\"\r\n                                disabled={loading}\r\n                            />\r\n                            <button onClick={handleUpdateProfileName} className=\"save-button\" disabled={loading}>حفظ</button>\r\n                            <button onClick={() => { setIsEditingName(false); setProfileName(profileName); setError(''); setMessage(''); }} className=\"cancel-button\" disabled={loading}>إلغاء</button>\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            <span>{profileName || 'غير محدد'}</span>\r\n                            <button onClick={() => setIsEditingName(true)} className=\"edit-button\" disabled={loading}>تعديل الاسم</button>\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n                {userRole === 'teacher' && associatedHalaqat.length > 0 && (\r\n                    <div className=\"detail-item\">\r\n                        <strong>الحلقات المرتبطة:</strong>\r\n                        <span>{associatedHalaqat.join(', ')}</span>\r\n                    </div>\r\n                )}\r\n\r\n                {userRole === 'guest' && associatedStudents.length > 0 && (\r\n                    <div className=\"detail-item\">\r\n                        <strong>الطلاب المرتبطون:</strong>\r\n                        <span>{associatedStudents.join(', ')}</span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"profile-actions card\">\r\n                <button onClick={handlePasswordReset} className=\"reset-password-button\" disabled={loading}>\r\n                    إعادة تعيين كلمة المرور\r\n                </button>\r\n                {/* يمكنك إضافة أزرار أخرى هنا مثل حذف الحساب (يتطلب تأكيدًا قوياً ومنطقًا معقدًا) */}\r\n            </div>\r\n\r\n            {/* مودال التأكيد */}\r\n            <CustomModal\r\n                isOpen={showModal}\r\n                title={modalConfig.title}\r\n                message={modalConfig.message}\r\n                onConfirm={modalConfig.onConfirm}\r\n                onCancel={modalConfig.onCancel}\r\n                showCancelButton={modalConfig.showCancelButton}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n"],"names":["_ref","isOpen","title","message","children","onConfirm","onCancel","showCancelButton","closeOnOverlayClick","modalRef","useRef","useEffect","_modalRef$current","current","focus","handleEscape","event","key","document","addEventListener","removeEventListener","_jsx","className","onClick","e","contains","target","_jsxs","ref","role","tabIndex","id","UserProfilePage","currentUser","userRole","loading","authLoading","useAuth","firebaseAuth","getAuth","profileName","setProfileName","useState","associatedHalaqat","setAssociatedHalaqat","associatedStudents","setAssociatedStudents","setLoading","error","setError","setMessage","isEditingName","setIsEditingName","showModal","setShowModal","modalConfig","setModalConfig","fetchUserProfile","useCallback","async","userDocRef","doc","db","uid","userDocSnap","getDoc","exists","userData","data","name","displayName","email","length","halaqatPromises","map","names","Promise","all","snap","studentsPromises","err","console","handleUpdateProfileName","trim","updateDoc","updateProfile","handlePasswordReset","sendPasswordResetEmail","type","value","onChange","disabled","_Fragment","join","CustomModal"],"sourceRoot":""}